library(cowplot)
install.packages('showtext')
install.packages("showtext")
library(showtext)
font_families()
showtext_auto()
old <-theme_light() + theme(text = element_text(family = "STXihei"))
theme_set(old)
setwd('~/Downloads/')
dir.create('HPA_ggplot_test')
setwd('~/Downloads/HPA_ggplot_test')
for (i in ids) {
dir_name = paste(i,'_HPA',sep='')
dir.create(dir_name)
gene_HPA_matrix <- HPA_dt[which(HPA_dt$Gene.name==i),]
#  gene_HPA_matrix <- gene_HPA_matrix[which(gene_HPA_matrix$nTPM != 0),]
title_name = paste(i,'nTPM',sep = ' ')
subtitle_name = 'HPA 组织特异性'
draw_data_1 <- gene_HPA_matrix[which(gene_HPA_matrix$draw_group=='淋巴/内分泌类'),]
draw_data_2 <- gene_HPA_matrix[which(gene_HPA_matrix$draw_group=='其他'),]
draw_data_3 <- gene_HPA_matrix[which(gene_HPA_matrix$draw_group=='生殖/泌尿类'),]
draw_data_4 <- gene_HPA_matrix[which(gene_HPA_matrix$draw_group=='神经类'),]
draw_data_5 <- gene_HPA_matrix[which(gene_HPA_matrix$draw_group=='消化/循环类'),]
draw_1 <- ggplot(draw_data_1,aes(x=reorder(chinese_name,-nTPM),y=nTPM,fill = chinese_name)) +
theme_bw() +
geom_bar(stat = 'identity',alpha = 0.85) +
theme(panel.grid = element_blank(),axis.text.x=element_text(size=14)) +
labs(title = title_name ,subtitle = paste(subtitle_name,'淋巴/内分泌类',sep = ' '),fill='') +
xlab('')
draw_2 <- ggplot(draw_data_2,aes(x=reorder(chinese_name,-nTPM),y=nTPM,fill = chinese_name)) +
theme_bw() +
geom_bar(stat = 'identity',alpha = 0.85) +
theme(panel.grid = element_blank(),axis.text.x=element_text(size=14)) +
labs(title = title_name ,subtitle = paste(subtitle_name,'其他',sep = ' '),fill='') +
xlab('')
draw_3 <- ggplot(draw_data_3,aes(x=reorder(chinese_name,-nTPM),y=nTPM,fill = chinese_name)) +
theme_bw() +
geom_bar(stat = 'identity',alpha = 0.85) +
theme(panel.grid = element_blank(),axis.text.x=element_text(size=14)) +
labs(title = title_name ,subtitle = paste(subtitle_name,'生殖/泌尿类',sep = ' '),fill='') +
xlab('')
draw_4 <- ggplot(draw_data_4,aes(x=reorder(chinese_name,-nTPM),y=nTPM,fill = chinese_name)) +
theme_bw() +
geom_bar(stat = 'identity',alpha = 0.85) +
theme(panel.grid = element_blank(),axis.text.x=element_text(size=14)) +
labs(title = title_name ,subtitle = paste(subtitle_name,'神经类',sep = ' '),fill='') +
xlab('')
draw_5 <- ggplot(draw_data_5,aes(x=reorder(chinese_name,-nTPM),y=nTPM,fill = chinese_name)) +
theme_bw() +
geom_bar(stat = 'identity',alpha = 0.85) +
theme(panel.grid = element_blank(),axis.text.x=element_text(size=14)) +
labs(title = title_name ,subtitle = paste(subtitle_name,'消化/循环类',sep = ' '),fill='') +
xlab('')
draw <- plot_grid(draw_1,draw_2,draw_3,draw_4,draw_5,nrow = 3)
png_name = paste(dir_name,'/',i,'_Tissue_spicify.png',sep='')
ggsave(plot = draw, filename = png_name,dpi=600,height = 25,width = 25)
}
HPA_dt <- read.table('~/Downloads/chinesed_HPA_data.txt')
ids <- unique(HPA_dt$Gene.name)
suppressMessages(library(ggplot2))
suppressMessages(library(cowplot))
setwd('~/Downloads/')
dir.create('HPA_tissue_ch')
setwd('HPA_tissue_ch/')
for (i in ids) {
dir_name = paste(i,'_HPA',sep='')
dir.create(dir_name)
gene_HPA_matrix <- HPA_dt[which(HPA_dt$Gene.name==i),]
#  gene_HPA_matrix <- gene_HPA_matrix[which(gene_HPA_matrix$nTPM != 0),]
title_name = paste(i,'nTPM',sep = ' ')
subtitle_name = 'HPA 组织特异性'
draw_data_1 <- gene_HPA_matrix[which(gene_HPA_matrix$draw_group=='淋巴/内分泌类'),]
draw_data_2 <- gene_HPA_matrix[which(gene_HPA_matrix$draw_group=='其他'),]
draw_data_3 <- gene_HPA_matrix[which(gene_HPA_matrix$draw_group=='生殖/泌尿类'),]
draw_data_4 <- gene_HPA_matrix[which(gene_HPA_matrix$draw_group=='神经类'),]
draw_data_5 <- gene_HPA_matrix[which(gene_HPA_matrix$draw_group=='消化/循环类'),]
draw_1 <- ggplot(draw_data_1,aes(x=reorder(chinese_name,-nTPM),y=nTPM,fill = chinese_name)) +
theme_bw() +
geom_bar(stat = 'identity',alpha = 0.85) +
theme(panel.grid = element_blank(),axis.text.x=element_text(size=14)) +
labs(title = title_name ,subtitle = paste(subtitle_name,'淋巴/内分泌类',sep = ' '),fill='') +
xlab('')
draw_2 <- ggplot(draw_data_2,aes(x=reorder(chinese_name,-nTPM),y=nTPM,fill = chinese_name)) +
theme_bw() +
geom_bar(stat = 'identity',alpha = 0.85) +
theme(panel.grid = element_blank(),axis.text.x=element_text(size=14)) +
labs(title = title_name ,subtitle = paste(subtitle_name,'其他',sep = ' '),fill='') +
xlab('')
draw_3 <- ggplot(draw_data_3,aes(x=reorder(chinese_name,-nTPM),y=nTPM,fill = chinese_name)) +
theme_bw() +
geom_bar(stat = 'identity',alpha = 0.85) +
theme(panel.grid = element_blank(),axis.text.x=element_text(size=14)) +
labs(title = title_name ,subtitle = paste(subtitle_name,'生殖/泌尿类',sep = ' '),fill='') +
xlab('')
draw_4 <- ggplot(draw_data_4,aes(x=reorder(chinese_name,-nTPM),y=nTPM,fill = chinese_name)) +
theme_bw() +
geom_bar(stat = 'identity',alpha = 0.85) +
theme(panel.grid = element_blank(),axis.text.x=element_text(size=14)) +
labs(title = title_name ,subtitle = paste(subtitle_name,'神经类',sep = ' '),fill='') +
xlab('')
draw_5 <- ggplot(draw_data_5,aes(x=reorder(chinese_name,-nTPM),y=nTPM,fill = chinese_name)) +
theme_bw() +
geom_bar(stat = 'identity',alpha = 0.85) +
theme(panel.grid = element_blank(),axis.text.x=element_text(size=14)) +
labs(title = title_name ,subtitle = paste(subtitle_name,'消化/循环类',sep = ' '),fill='') +
xlab('')
draw <- plot_grid(draw_1,draw_2,draw_3,draw_4,draw_5,nrow = 3)
png_name = paste(i,'_Tissue_spicify.png',sep='')
png
ggsave(plot = draw, filename = png_name,dpi=600,height = 25,width = 25)
}
dir.create('HPA_tissue_ch')
setwd('HPA_tissue_ch/')
setwd('~/Downloads/')
dir.create('HPA_tissue_ch')
setwd('HPA_tissue_ch/')
for (i in ids) {
dir_name = paste(i,'_HPA',sep='')
dir.create(dir_name)
gene_HPA_matrix <- HPA_dt[which(HPA_dt$Gene.name==i),]
#  gene_HPA_matrix <- gene_HPA_matrix[which(gene_HPA_matrix$nTPM != 0),]
title_name = paste(i,'nTPM',sep = ' ')
subtitle_name = 'HPA 组织特异性'
draw_data_1 <- gene_HPA_matrix[which(gene_HPA_matrix$draw_group=='淋巴/内分泌类'),]
draw_data_2 <- gene_HPA_matrix[which(gene_HPA_matrix$draw_group=='其他'),]
draw_data_3 <- gene_HPA_matrix[which(gene_HPA_matrix$draw_group=='生殖/泌尿类'),]
draw_data_4 <- gene_HPA_matrix[which(gene_HPA_matrix$draw_group=='神经类'),]
draw_data_5 <- gene_HPA_matrix[which(gene_HPA_matrix$draw_group=='消化/循环类'),]
draw_1 <- ggplot(draw_data_1,aes(x=reorder(chinese_name,-nTPM),y=nTPM,fill = chinese_name)) +
theme_bw() +
geom_bar(stat = 'identity',alpha = 0.85) +
theme(panel.grid = element_blank(),axis.text.x=element_text(size=14)) +
labs(title = title_name ,subtitle = paste(subtitle_name,'淋巴/内分泌类',sep = ' '),fill='') +
xlab('')
draw_2 <- ggplot(draw_data_2,aes(x=reorder(chinese_name,-nTPM),y=nTPM,fill = chinese_name)) +
theme_bw() +
geom_bar(stat = 'identity',alpha = 0.85) +
theme(panel.grid = element_blank(),axis.text.x=element_text(size=14)) +
labs(title = title_name ,subtitle = paste(subtitle_name,'其他',sep = ' '),fill='') +
xlab('')
draw_3 <- ggplot(draw_data_3,aes(x=reorder(chinese_name,-nTPM),y=nTPM,fill = chinese_name)) +
theme_bw() +
geom_bar(stat = 'identity',alpha = 0.85) +
theme(panel.grid = element_blank(),axis.text.x=element_text(size=14)) +
labs(title = title_name ,subtitle = paste(subtitle_name,'生殖/泌尿类',sep = ' '),fill='') +
xlab('')
draw_4 <- ggplot(draw_data_4,aes(x=reorder(chinese_name,-nTPM),y=nTPM,fill = chinese_name)) +
theme_bw() +
geom_bar(stat = 'identity',alpha = 0.85) +
theme(panel.grid = element_blank(),axis.text.x=element_text(size=14)) +
labs(title = title_name ,subtitle = paste(subtitle_name,'神经类',sep = ' '),fill='') +
xlab('')
draw_5 <- ggplot(draw_data_5,aes(x=reorder(chinese_name,-nTPM),y=nTPM,fill = chinese_name)) +
theme_bw() +
geom_bar(stat = 'identity',alpha = 0.85) +
theme(panel.grid = element_blank(),axis.text.x=element_text(size=14)) +
labs(title = title_name ,subtitle = paste(subtitle_name,'消化/循环类',sep = ' '),fill='') +
xlab('')
draw <- plot_grid(draw_1,draw_2,draw_3,draw_4,draw_5,nrow = 3)
png_name = paste(dir_name,'/',i,'_Tissue_spicify.png',sep='')
png
ggsave(plot = draw, filename = png_name,dpi=600,height = 25,width = 25)
}
for (i in ids[7530:20082]) {
dir_name = paste(i,'_HPA',sep='')
dir.create(dir_name)
gene_HPA_matrix <- HPA_dt[which(HPA_dt$Gene.name==i),]
#  gene_HPA_matrix <- gene_HPA_matrix[which(gene_HPA_matrix$nTPM != 0),]
title_name = paste(i,'nTPM',sep = ' ')
subtitle_name = 'HPA 组织特异性'
draw_data_1 <- gene_HPA_matrix[which(gene_HPA_matrix$draw_group=='淋巴/内分泌类'),]
draw_data_2 <- gene_HPA_matrix[which(gene_HPA_matrix$draw_group=='其他'),]
draw_data_3 <- gene_HPA_matrix[which(gene_HPA_matrix$draw_group=='生殖/泌尿类'),]
draw_data_4 <- gene_HPA_matrix[which(gene_HPA_matrix$draw_group=='神经类'),]
draw_data_5 <- gene_HPA_matrix[which(gene_HPA_matrix$draw_group=='消化/循环类'),]
draw_1 <- ggplot(draw_data_1,aes(x=reorder(chinese_name,-nTPM),y=nTPM,fill = chinese_name)) +
theme_bw() +
geom_bar(stat = 'identity',alpha = 0.85) +
theme(panel.grid = element_blank(),axis.text.x=element_text(size=14)) +
labs(title = title_name ,subtitle = paste(subtitle_name,'淋巴/内分泌类',sep = ' '),fill='') +
xlab('')
draw_2 <- ggplot(draw_data_2,aes(x=reorder(chinese_name,-nTPM),y=nTPM,fill = chinese_name)) +
theme_bw() +
geom_bar(stat = 'identity',alpha = 0.85) +
theme(panel.grid = element_blank(),axis.text.x=element_text(size=14)) +
labs(title = title_name ,subtitle = paste(subtitle_name,'其他',sep = ' '),fill='') +
xlab('')
draw_3 <- ggplot(draw_data_3,aes(x=reorder(chinese_name,-nTPM),y=nTPM,fill = chinese_name)) +
theme_bw() +
geom_bar(stat = 'identity',alpha = 0.85) +
theme(panel.grid = element_blank(),axis.text.x=element_text(size=14)) +
labs(title = title_name ,subtitle = paste(subtitle_name,'生殖/泌尿类',sep = ' '),fill='') +
xlab('')
draw_4 <- ggplot(draw_data_4,aes(x=reorder(chinese_name,-nTPM),y=nTPM,fill = chinese_name)) +
theme_bw() +
geom_bar(stat = 'identity',alpha = 0.85) +
theme(panel.grid = element_blank(),axis.text.x=element_text(size=14)) +
labs(title = title_name ,subtitle = paste(subtitle_name,'神经类',sep = ' '),fill='') +
xlab('')
draw_5 <- ggplot(draw_data_5,aes(x=reorder(chinese_name,-nTPM),y=nTPM,fill = chinese_name)) +
theme_bw() +
geom_bar(stat = 'identity',alpha = 0.85) +
theme(panel.grid = element_blank(),axis.text.x=element_text(size=14)) +
labs(title = title_name ,subtitle = paste(subtitle_name,'消化/循环类',sep = ' '),fill='') +
xlab('')
draw <- plot_grid(draw_1,draw_2,draw_3,draw_4,draw_5,nrow = 3)
png_name = paste(dir_name,'/',i,'_Tissue_spicify.png',sep='')
png
ggsave(plot = draw, filename = png_name,dpi=600,height = 25,width = 25)
}
ids[7529]
ids[7530]
dir.exists('SLC9A9')
dir.exists('SLC9A9_HPA')
for (i in ids) {
dir_name = paste(i,'_HPA',sep='')
if (dir.exists(dir_name)=='TRUE'){
print('Already exit')} else{
dir.create(dir_name)
gene_HPA_matrix <- HPA_dt[which(HPA_dt$Gene.name==i),]
#  gene_HPA_matrix <- gene_HPA_matrix[which(gene_HPA_matrix$nTPM != 0),]
title_name = paste(i,'nTPM',sep = ' ')
subtitle_name = 'HPA 组织特异性'
draw_data_1 <- gene_HPA_matrix[which(gene_HPA_matrix$draw_group=='淋巴/内分泌类'),]
draw_data_2 <- gene_HPA_matrix[which(gene_HPA_matrix$draw_group=='其他'),]
draw_data_3 <- gene_HPA_matrix[which(gene_HPA_matrix$draw_group=='生殖/泌尿类'),]
draw_data_4 <- gene_HPA_matrix[which(gene_HPA_matrix$draw_group=='神经类'),]
draw_data_5 <- gene_HPA_matrix[which(gene_HPA_matrix$draw_group=='消化/循环类'),]
draw_1 <- ggplot(draw_data_1,aes(x=reorder(chinese_name,-nTPM),y=nTPM,fill = chinese_name)) +
theme_bw() +
geom_bar(stat = 'identity',alpha = 0.85) +
theme(panel.grid = element_blank(),axis.text.x=element_text(size=14)) +
labs(title = title_name ,subtitle = paste(subtitle_name,'淋巴/内分泌类',sep = ' '),fill='') +
xlab('')
draw_2 <- ggplot(draw_data_2,aes(x=reorder(chinese_name,-nTPM),y=nTPM,fill = chinese_name)) +
theme_bw() +
geom_bar(stat = 'identity',alpha = 0.85) +
theme(panel.grid = element_blank(),axis.text.x=element_text(size=14)) +
labs(title = title_name ,subtitle = paste(subtitle_name,'其他',sep = ' '),fill='') +
xlab('')
draw_3 <- ggplot(draw_data_3,aes(x=reorder(chinese_name,-nTPM),y=nTPM,fill = chinese_name)) +
theme_bw() +
geom_bar(stat = 'identity',alpha = 0.85) +
theme(panel.grid = element_blank(),axis.text.x=element_text(size=14)) +
labs(title = title_name ,subtitle = paste(subtitle_name,'生殖/泌尿类',sep = ' '),fill='') +
xlab('')
draw_4 <- ggplot(draw_data_4,aes(x=reorder(chinese_name,-nTPM),y=nTPM,fill = chinese_name)) +
theme_bw() +
geom_bar(stat = 'identity',alpha = 0.85) +
theme(panel.grid = element_blank(),axis.text.x=element_text(size=14)) +
labs(title = title_name ,subtitle = paste(subtitle_name,'神经类',sep = ' '),fill='') +
xlab('')
draw_5 <- ggplot(draw_data_5,aes(x=reorder(chinese_name,-nTPM),y=nTPM,fill = chinese_name)) +
theme_bw() +
geom_bar(stat = 'identity',alpha = 0.85) +
theme(panel.grid = element_blank(),axis.text.x=element_text(size=14)) +
labs(title = title_name ,subtitle = paste(subtitle_name,'消化/循环类',sep = ' '),fill='') +
xlab('')
draw <- plot_grid(draw_1,draw_2,draw_3,draw_4,draw_5,nrow = 3)
png_name = paste(dir_name,'/',i,'_Tissue_spicify.png',sep='')
png
ggsave(plot = draw, filename = png_name,dpi=600,height = 25,width = 25)}
}
system
system2()
for (i in ids) {
dir_name = paste(i,'_HPA',sep='')
if (dir.exists(dir_name)=='TRUE'){
print('Already exit')} else{
dir.create(dir_name)
gene_HPA_matrix <- HPA_dt[which(HPA_dt$Gene.name==i),]
#  gene_HPA_matrix <- gene_HPA_matrix[which(gene_HPA_matrix$nTPM != 0),]
title_name = paste(i,'nTPM',sep = ' ')
subtitle_name = 'HPA 组织特异性'
draw_data_1 <- gene_HPA_matrix[which(gene_HPA_matrix$draw_group=='淋巴/内分泌类'),]
draw_data_2 <- gene_HPA_matrix[which(gene_HPA_matrix$draw_group=='其他'),]
draw_data_3 <- gene_HPA_matrix[which(gene_HPA_matrix$draw_group=='生殖/泌尿类'),]
draw_data_4 <- gene_HPA_matrix[which(gene_HPA_matrix$draw_group=='神经类'),]
draw_data_5 <- gene_HPA_matrix[which(gene_HPA_matrix$draw_group=='消化/循环类'),]
draw_1 <- ggplot(draw_data_1,aes(x=reorder(chinese_name,-nTPM),y=nTPM,fill = chinese_name)) +
theme_bw() +
geom_bar(stat = 'identity',alpha = 0.85) +
theme(panel.grid = element_blank(),axis.text.x=element_text(size=14)) +
labs(title = title_name ,subtitle = paste(subtitle_name,'淋巴/内分泌类',sep = ' '),fill='') +
xlab('')
draw_2 <- ggplot(draw_data_2,aes(x=reorder(chinese_name,-nTPM),y=nTPM,fill = chinese_name)) +
theme_bw() +
geom_bar(stat = 'identity',alpha = 0.85) +
theme(panel.grid = element_blank(),axis.text.x=element_text(size=14)) +
labs(title = title_name ,subtitle = paste(subtitle_name,'其他',sep = ' '),fill='') +
xlab('')
draw_3 <- ggplot(draw_data_3,aes(x=reorder(chinese_name,-nTPM),y=nTPM,fill = chinese_name)) +
theme_bw() +
geom_bar(stat = 'identity',alpha = 0.85) +
theme(panel.grid = element_blank(),axis.text.x=element_text(size=14)) +
labs(title = title_name ,subtitle = paste(subtitle_name,'生殖/泌尿类',sep = ' '),fill='') +
xlab('')
draw_4 <- ggplot(draw_data_4,aes(x=reorder(chinese_name,-nTPM),y=nTPM,fill = chinese_name)) +
theme_bw() +
geom_bar(stat = 'identity',alpha = 0.85) +
theme(panel.grid = element_blank(),axis.text.x=element_text(size=14)) +
labs(title = title_name ,subtitle = paste(subtitle_name,'神经类',sep = ' '),fill='') +
xlab('')
draw_5 <- ggplot(draw_data_5,aes(x=reorder(chinese_name,-nTPM),y=nTPM,fill = chinese_name)) +
theme_bw() +
geom_bar(stat = 'identity',alpha = 0.85) +
theme(panel.grid = element_blank(),axis.text.x=element_text(size=14)) +
labs(title = title_name ,subtitle = paste(subtitle_name,'消化/循环类',sep = ' '),fill='') +
xlab('')
draw <- plot_grid(draw_1,draw_2,draw_3,draw_4,draw_5,nrow = 3)
png_name = paste(dir_name,'/',i,'_Tissue_spicify.png',sep='')
png
ggsave(plot = draw, filename = png_name,dpi=600,height = 25,width = 25)
system2(command = 'gzip',args = png_name)}
}
View(HPA_dt)
for (i in ids) {
dir_name = paste(i,'_HPA',sep='')
if (dir.exists(dir_name)=='TRUE'){
print('Already exit')} else{
dir.create(dir_name)
gene_HPA_matrix <- HPA_dt[which(HPA_dt$Gene.name==i),]
#  gene_HPA_matrix <- gene_HPA_matrix[which(gene_HPA_matrix$nTPM != 0),]
title_name = paste(i,'nTPM',sep = ' ')
subtitle_name = 'HPA 组织特异性'
draw_data_1 <- gene_HPA_matrix[which(gene_HPA_matrix$draw_group=='淋巴/内分泌类'),]
draw_data_2 <- gene_HPA_matrix[which(gene_HPA_matrix$draw_group=='其他'),]
draw_data_3 <- gene_HPA_matrix[which(gene_HPA_matrix$draw_group=='生殖/泌尿类'),]
draw_data_4 <- gene_HPA_matrix[which(gene_HPA_matrix$draw_group=='神经类'),]
draw_data_5 <- gene_HPA_matrix[which(gene_HPA_matrix$draw_group=='消化/循环类'),]
draw_1 <- ggplot(draw_data_1,aes(x=reorder(chinese_name,-nTPM),y=nTPM,fill = chinese_name)) +
theme_bw() +
geom_bar(stat = 'identity',alpha = 0.85) +
theme(panel.grid = element_blank(),axis.text.x=element_text(size=14)) +
labs(title = title_name ,subtitle = paste(subtitle_name,'淋巴/内分泌类',sep = ' '),fill='') +
xlab('')
draw_2 <- ggplot(draw_data_2,aes(x=reorder(chinese_name,-nTPM),y=nTPM,fill = chinese_name)) +
theme_bw() +
geom_bar(stat = 'identity',alpha = 0.85) +
theme(panel.grid = element_blank(),axis.text.x=element_text(size=14)) +
labs(title = title_name ,subtitle = paste(subtitle_name,'其他',sep = ' '),fill='') +
xlab('')
draw_3 <- ggplot(draw_data_3,aes(x=reorder(chinese_name,-nTPM),y=nTPM,fill = chinese_name)) +
theme_bw() +
geom_bar(stat = 'identity',alpha = 0.85) +
theme(panel.grid = element_blank(),axis.text.x=element_text(size=14)) +
labs(title = title_name ,subtitle = paste(subtitle_name,'生殖/泌尿类',sep = ' '),fill='') +
xlab('')
draw_4 <- ggplot(draw_data_4,aes(x=reorder(chinese_name,-nTPM),y=nTPM,fill = chinese_name)) +
theme_bw() +
geom_bar(stat = 'identity',alpha = 0.85) +
theme(panel.grid = element_blank(),axis.text.x=element_text(size=14)) +
labs(title = title_name ,subtitle = paste(subtitle_name,'神经类',sep = ' '),fill='') +
xlab('')
draw_5 <- ggplot(draw_data_5,aes(x=reorder(chinese_name,-nTPM),y=nTPM,fill = chinese_name)) +
theme_bw() +
geom_bar(stat = 'identity',alpha = 0.85) +
theme(panel.grid = element_blank(),axis.text.x=element_text(size=14)) +
labs(title = title_name ,subtitle = paste(subtitle_name,'消化/循环类',sep = ' '),fill='') +
xlab('')
draw <- plot_grid(draw_1,draw_2,draw_3,draw_4,draw_5,nrow = 3)
png_name = paste(dir_name,'/',i,'_Tissue_spicify.png',sep='')
png
ggsave(plot = draw, filename = png_name,dpi=600,height = 25,width = 25)
system2(command = 'gzip',args = png_name)}
}
View(data_2)
library(dplyr)
a <- data_2 %>% select(Case_27_T,Case_06_T)
View(a)
eval()
eval()
??eval()
library('argparser',quietly = T)
#For cwl
# prepare env
download.packages('argparser')
install.packages("argparser")
library('argparser')
?? add_argument {argparser}
?? add_argument {argparser}
?? add_argument
str(0.02)
# loading arguments
get_arg <-function(){
p <- parse_args("Annovar Filter analysis")
p <- add_argument(p,'--annovar_dt',help = 'Annovar annotated file',type = 'character')
p <- add_argument(p,'--sample_name',help = 'Sample name',type = 'character')
p <- add_argument(p,'--maf_cutoff',help = 'MAF cutoff',type = 'numeric' )
p <- add_argument(p,'--maf_database',help = 'filter database',type = 'character')
p <- add_argument(p,'--region_filter',help = 'Variation region filter',type = 'character',default = '')
p <- add_argument(p,'--function_filter',help = 'Variation function effect filter',type = 'character',default = '')
args <- parse_args(p)
return(args)
}
args <- get_arg()
args <- get_arg()
args <- get_arg()
# loading arguments
get_arg <-function(){
p <- arg_parser("Annovar Filter analysis")
p <- add_argument(p,'--annovar_dt',help = 'Annovar annotated file',type = 'character')
p <- add_argument(p,'--sample_name',help = 'Sample name',type = 'character')
p <- add_argument(p,'--maf_cutoff',help = 'MAF cutoff',type = 'numeric' )
p <- add_argument(p,'--maf_database',help = 'filter database',type = 'character')
p <- add_argument(p,'--region_filter',help = 'Variation region filter',type = 'character',default = '')
p <- add_argument(p,'--function_filter',help = 'Variation function effect filter',type = 'character',default = '')
args <- parse_args(p)
return(args)
}
args <- get_arg()
args$opts
args$annovar_dt
# loading arguments
get_arg <-function(){
p <- arg_parser("Annovar Filter analysis")
p <- add_argument(p,'--annovar_dt',help = 'Annovar annotated file',type = 'character')
p <- add_argument(p,'--sample_name',help = 'Sample name',type = 'character')
p <- add_argument(p,'--maf_cutoff',help = 'MAF cutoff',type = 'numeric' )
p <- add_argument(p,'--maf_database',help = 'filter database',type = 'character','"1000G_ALL" "1000G_EAS" "ExAC_ALL" "ExAC_EAS" "ESP6500siv2_ALL" "ESP6500siv2_EA" "AF" "AF_eas"')
p <- add_argument(p,'--region_filter',help = 'Variation region filter',type = 'character',default = '')
p <- add_argument(p,'--function_filter',help = 'Variation function effect filter',type = 'character',default = '')
args <- parse_args(p)
return(args)
}
args <- get_arg()
args$annovar_dt
args$maf_database
args$maf_database[1]
p <- add_argument(p,'--maf_database',help = 'filter database',type = 'character',default = '"1000G_ALL" "1000G_EAS" "ExAC_ALL" "ExAC_EAS" "ESP6500siv2_ALL" "ESP6500siv2_EA" "AF" "AF_eas"')
# loading arguments
get_arg <-function(){
p <- arg_parser("Annovar Filter analysis")
p <- add_argument(p,'--annovar_dt',help = 'Annovar annotated file',type = 'character')
p <- add_argument(p,'--sample_name',help = 'Sample name',type = 'character')
p <- add_argument(p,'--maf_cutoff',help = 'MAF cutoff',type = 'numeric' )
p <- add_argument(p,'--maf_database',help = 'filter database',type = 'character',default = '"1000G_ALL" "1000G_EAS" "ExAC_ALL" "ExAC_EAS" "ESP6500siv2_ALL" "ESP6500siv2_EA" "AF" "AF_eas"')
p <- add_argument(p,'--region_filter',help = 'Variation region filter',type = 'character',default = '')
p <- add_argument(p,'--function_filter',help = 'Variation function effect filter',type = 'character',default = '')
args <- parse_args(p)
return(args)
}
args <- get_arg()
args$annovar_dt
args$maf_database[1]
#For cwl
# prepare env
download.packages('argparser')
library('readr')
library('stringr')
library('dplyr')
library('argparser')
# loading arguments
get_arg <-function(){
p <- arg_parser("Annovar Filter analysis")
p <- add_argument(p,'--annovar_dt',help = 'Annovar annotated file',type = 'character')
p <- add_argument(p,'--sample_name',help = 'Sample name',type = 'character')
p <- add_argument(p,'--maf_cutoff',help = 'MAF cutoff',type = 'numeric' )
p <- add_argument(p,'--maf_database',help = 'filter database',type = 'character',default = '"1000G_ALL" "1000G_EAS" "ExAC_ALL" "ExAC_EAS" "ESP6500siv2_ALL" "ESP6500siv2_EA" "AF" "AF_eas"')
p <- add_argument(p,'--region_filter',help = 'Variation region filter',type = 'character',default = '')
p <- add_argument(p,'--function_filter',help = 'Variation function effect filter',type = 'character',default = '')
args <- parse_args(p)
return(args)
}
args <- get_arg()
args$annovar_dt
args$maf_database[1]
setwd('~/Downloads/annovar_cwl_workflow/toolandworkflow-master/analysisWorkflows/tools/varaiation_platform_cwl/')
library('readr')
library('stringr')
library('dplyr')
options(scipen = 200)
#loading file
print("Loading annovar file......")
annoted_dt <- read_delim('annotated.txt','\t', escape_double = FALSE, trim_ws = TRUE)
print("exempting the annovar annotated result by clinvar......")
clinvar_exmpt_data <- annoted_dt[which(annoted_dt$CLIN_exmpt=="True"),]
non_exmpt_data <- annoted_dt[which(annoted_dt$CLIN_exmpt!="True"),]
print('done ......
peparing to the filter files')
#max_freq <- apply(dt[,freq_donated],1,max,na.rm=F)
clinvar_exmpt_data$max_maf <- apply(clinvar_exmpt_data[,freq_donated],1,max,na.rm=F)
#max_freq <- apply(dt[,freq_donated],1,max,na.rm=F)
clinvar_exmpt_data$max_maf <- apply(clinvar_exmpt_data[,args$maf_database],1,max,na.rm=F)
maf_database <- args$maf_database
View(clinvar_exmpt_data)
#max_freq <- apply(dt[,freq_donated],1,max,na.rm=F)
clinvar_exmpt_data$max_maf <- apply(clinvar_exmpt_data[,maf_database],1,max,na.rm=F)
maf_database <- unlist(str_split(args$maf_database, ' '))
#max_freq <- apply(dt[,freq_donated],1,max,na.rm=F)
clinvar_exmpt_data$max_maf <- apply(clinvar_exmpt_data[,maf_database],1,max,na.rm=F)
# loading arguments
get_arg <-function(){
p <- arg_parser("Annovar Filter analysis")
p <- add_argument(p,'--annovar_dt',help = 'Annovar annotated file',type = 'character')
p <- add_argument(p,'--sample_name',help = 'Sample name',type = 'character')
p <- add_argument(p,'--maf_cutoff',help = 'MAF cutoff',type = 'numeric' )
p <- add_argument(p,'--maf_database',help = 'filter database',type = 'character',default = '1000G_ALL 1000G_EAS ExAC_ALL ExAC_EAS ESP6500siv2_ALL ESP6500siv2_EA AF AF_eas')
p <- add_argument(p,'--region_filter',help = 'Variation region filter',type = 'character',default = '')
p <- add_argument(p,'--function_filter',help = 'Variation function effect filter',type = 'character',default = '')
args <- parse_args(p)
return(args)
}
args <- get_arg()
args$annovar_dt
args$maf_database
maf_database <- unlist(str_split(args$maf_database, ' '))
#max_freq <- apply(dt[,freq_donated],1,max,na.rm=F)
clinvar_exmpt_data$max_maf <- apply(clinvar_exmpt_data[,maf_database],1,max,na.rm=F)
View(annoted_dt)
View(annoted_dt)
table(annoted_dt$ExonicFunc.refGene)
