{
    "class": "Workflow",
    "cwlVersion": "v1.0",
    "id": "_varminer",
    "label": "Varminer",
    "$namespaces": {
        "sbg": "https://www.sevenbridges.com/"
    },
    "inputs": [
        {
            "id": "annoPath",
            "type": "Directory?",
            "default": {
                "class": "Directory",
                "path": "/mnt/datashare/reference_genome/geneAnno"
            },
            "sbg:x": 194.8907928466797,
            "sbg:y": 1033.107666015625
        },
        {
            "id": "inputType",
            "type": "string?",
            "default": "file",
            "sbg:exposed": true
        },
        {
            "id": "annoCol",
            "type": "string?",
            "default": "Gene.refGene",
            "sbg:exposed": true
        },
        {
            "id": "output_2",
            "type": "string?",
            "default": "annotated.txt",
            "sbg:exposed": true
        },
        {
            "id": "annoFileList",
            "type": "string[]?",
            "default": [
                "annotation",
                "OMIM",
                "GO",
                "DO",
                "HPO",
                "KEGG",
                "WIKI",
                "REACTOME",
                "BIOCARTA",
                "HALLMARK",
                "PID"
            ],
            "sbg:exposed": true
        },
        {
            "id": "geneAlias",
            "type": "string?",
            "default": "yes",
            "sbg:exposed": true
        },
        {
            "id": "raw_vcf",
            "type": "File?",
            "sbg:x": 494.3118591308594,
            "sbg:y": 646.6767578125
        },
        {
            "id": "annovar_db",
            "type": "Directory?",
            "default": {
                "class": "Directory",
                "path": "/mnt/datashare/annovar_db/humandb"
            },
            "sbg:x": 123.54470825195312,
            "sbg:y": 815.4917602539062
        },
        {
            "id": "ref_version",
            "type": "string?",
            "sbg:x": 29.727190017700195,
            "sbg:y": 135.54652404785156
        },
        {
            "id": "splicing_threshold",
            "type": "int?",
            "sbg:x": 93.34489440917969,
            "sbg:y": -45.071170806884766
        },
        {
            "id": "output",
            "type": "string?",
            "sbg:x": 59.92791748046875,
            "sbg:y": 360.6186218261719
        },
        {
            "id": "Trans_result",
            "type": "string?",
            "sbg:exposed": true
        },
        {
            "id": "maf_threshold",
            "type": "float?",
            "sbg:x": 549.0182495117188,
            "sbg:y": 902.9635009765625
        },
        {
            "id": "exomiser_extract_result_name",
            "type": "string?",
            "sbg:x": 1938.7816162109375,
            "sbg:y": 684.04052734375
        },
        {
            "id": "yml",
            "type": "File?",
            "default": {
                "class": "File",
                "path": "/mnt/datashare/home/wangzesong/test_exomiser.yml"
            },
            "sbg:x": 1608.82666015625,
            "sbg:y": -164.7262725830078
        },
        {
            "id": "version",
            "type": "string?",
            "default": "2109",
            "sbg:x": 1295.8468017578125,
            "sbg:y": -97.16240692138672
        },
        {
            "id": "outpref",
            "type": "string?",
            "sbg:x": 48.98175048828125,
            "sbg:y": 478.09124755859375
        },
        {
            "id": "maxFreq",
            "type": "float?",
            "sbg:x": 1185.8841552734375,
            "sbg:y": 27.530988693237305
        },
        {
            "id": "hpoIds",
            "type": "string[]?",
            "sbg:x": 1317.810302734375,
            "sbg:y": 192.42152404785156
        },
        {
            "id": "dirdata",
            "type": "Directory?",
            "default": {
                "class": "Directory",
                "path": "/mnt/datashare/reference_genome/Exomiser/exomiser-data"
            },
            "sbg:x": 1196.774658203125,
            "sbg:y": 322.1121826171875
        },
        {
            "id": "default_col",
            "type": "string[]?",
            "sbg:x": 2453.9765625,
            "sbg:y": 812.2870483398438
        }
    ],
    "outputs": [
        {
            "id": "output_txt",
            "outputSource": [
                "new_annovar_function/output_txt"
            ],
            "type": "File?",
            "sbg:x": 774.8611450195312,
            "sbg:y": 41.3057975769043
        },
        {
            "id": "result_data",
            "outputSource": [
                "merge_exomiser_annovar_res/result_data"
            ],
            "type": "File?",
            "sbg:x": 3447.629638671875,
            "sbg:y": 334.4917907714844
        }
    ],
    "steps": [
        {
            "id": "geneanno",
            "in": [
                {
                    "id": "inputType",
                    "source": "inputType"
                },
                {
                    "id": "inputFile",
                    "source": "new_annovar_function/output_txt"
                },
                {
                    "id": "annoCol",
                    "source": "annoCol"
                },
                {
                    "id": "annoPath",
                    "source": "annoPath"
                },
                {
                    "id": "output",
                    "source": "output_2"
                },
                {
                    "id": "annoFileList",
                    "source": [
                        "annoFileList"
                    ]
                },
                {
                    "id": "geneAlias",
                    "source": "geneAlias"
                }
            ],
            "out": [
                {
                    "id": "output_1"
                }
            ],
            "run": {
                "class": "CommandLineTool",
                "cwlVersion": "v1.0",
                "$namespaces": {
                    "sbg": "https://www.sevenbridges.com/"
                },
                "id": "geneanno",
                "baseCommand": [
                    "python",
                    "geneAnno.py",
                    "wqrwr4"
                ],
                "inputs": [
                    {
                        "id": "inputType",
                        "type": "string?",
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--inputType"
                        }
                    },
                    {
                        "id": "gene",
                        "type": "string?",
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--gene"
                        }
                    },
                    {
                        "id": "inputFile",
                        "type": "File?",
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--inputFile"
                        }
                    },
                    {
                        "id": "annoCol",
                        "type": "string?",
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--annoCol"
                        }
                    },
                    {
                        "id": "geneMulti",
                        "type": "string?",
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--geneMulti"
                        }
                    },
                    {
                        "id": "annoPath",
                        "type": "Directory?",
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--annoPath"
                        }
                    },
                    {
                        "id": "genesep",
                        "type": "string?",
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--genesep"
                        }
                    },
                    {
                        "default": "out.txt",
                        "id": "output",
                        "type": "string?",
                        "inputBinding": {
                            "position": 100,
                            "prefix": "--output"
                        }
                    },
                    {
                        "id": "annoFileList",
                        "type": "string[]?",
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--annoFileList",
                            "itemSeparator": ","
                        }
                    },
                    {
                        "id": "geneAlias",
                        "type": "string?",
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--geneAlias"
                        }
                    }
                ],
                "outputs": [
                    {
                        "id": "output_1",
                        "type": "File?",
                        "outputBinding": {
                            "glob": "$(inputs.output)"
                        }
                    }
                ],
                "label": "geneAnno",
                "requirements": [
                    {
                        "class": "DockerRequirement",
                        "dockerPull": "harbor.bio-it.cn:5000/library/py38_r403:anno"
                    },
                    {
                        "class": "InitialWorkDirRequirement",
                        "listing": [
                            {
                                "entryname": "geneAnno.py",
                                "entry": "import warnings\r\nwarnings.filterwarnings(\"ignore\")\r\nimport pandas as pd\r\nimport numpy as np\r\nimport sys\r\nimport os\r\n\r\nfrom optparse import OptionParser\r\n\r\nparser = OptionParser()\r\nparser.add_option('--inputType', dest=\"inputType\", default = \"list\", help=\"list or file\")\r\nparser.add_option('--gene', dest=\"gene\", default = \"\", help=\"if inputType list, gene list\")\r\nparser.add_option('--inputFile', dest=\"inputFile\", default = \"\", help=\"if inputType file, gene file\")\r\nparser.add_option('--annoCol', dest=\"annoCol\", default = \"\", help=\"if inputType file, gene col\")\r\nparser.add_option('--geneMulti', dest=\"geneMulti\", default = \" \", help=\"if inputType file, gene multi, yes or no\")\r\nparser.add_option('--genesep', dest=\"genesep\", default = \" \", help=\"if inputType file, if geneMulti yes, gene sep\")\r\nparser.add_option('--annoPath', dest=\"annoPath\", default = \" \", help=\"annoPath\")\r\nparser.add_option('--output', dest=\"output\", default = \" \", help=\"output\")\r\nparser.add_option('--annoFileList', dest=\"annoFileList\", default = \" \", help=\"annoFileList, comma join\")\r\nparser.add_option('--geneAlias', default = \" \", dest=\"geneAlias\", help=\"geneAlias, yes or no\")\r\n(options, args) = parser.parse_args()\r\nfor i in \"inputType,gene,inputFile,annoCol,geneMulti,genesep,annoPath,output,annoFileList,geneAlias\".split(\",\"):\r\n    exec(i+\"=options.\"+i)\r\n\r\n\r\n\r\ndef read_data(inputFile,write = False,writeData = None):\r\n    fileType = inputFile.split(\".\")[-1]\r\n    if fileType == \"xlsx\":\r\n        if write:\r\n            writeData.to_excel(inputFile)\r\n        else:\r\n            transData = pd.read_excel(inputFile,dtype=\"str\")\r\n    else:\r\n        if fileType in [\"txt\",\"tsv\"]:\r\n            sep = \"\\t\"\r\n        else:\r\n            sep=\",\"\r\n        if write:\r\n            writeData.to_csv(inputFile,sep=sep,index = False)\r\n        else:\r\n            transData = pd.read_csv(inputFile,dtype=\"str\",sep=sep)\r\n    if not write:\r\n        return transData\r\n\r\ndef trans_int(x):\r\n    if not pd.isnull(x):\r\n        x = int(x)\r\n    return x\r\ndef trans_str(x):\r\n    if not pd.isnull(x):\r\n        x = str(int(x))\r\n    return x\r\n    \r\nif inputType == \"list\":\r\n    annoCol = \"search\"\r\n    gene = gene.replace(\",\",\"\\n\").replace(\"\\n\",\"\\t\").replace(\" \",\"\\t\").split(\"\\t\")\r\n    transData = pd.DataFrame(gene,columns=[annoCol])\r\n    transData = transData[transData[annoCol] != \"\"]\r\n    transData.index = range(len(transData))\r\nelif inputType == \"file\":\r\n    transData = read_data(inputFile)\r\ngeneTrans = pd.read_csv(os.path.join(annoPath,\"geneTrans.csv.gz\"),dtype=\"str\")\r\nif geneAlias == \"no\":\r\n    geneTrans = geneTrans[geneTrans[\"type\"] != \"synonyms\"]\r\ntransDataGene = transData[[annoCol]]\r\ntransDataGene.columns = [\"up\"]\r\ntransDataGene[\"up\"] = transDataGene[\"up\"].str.upper()\r\nif geneMulti == \"yes\":\r\n    transDataGene[\"order\"] = transDataGene.index\r\n    transDataGene = transDataGene.drop(\"up\", axis=1).join(transDataGene[\"up\"].str.split(genesep, expand=True).stack().reset_index(level=1, drop=True).rename(\"up\"))\r\ntransDataGene = pd.merge(transDataGene,geneTrans[[\"up\",\"id\"]],on=\"up\",how=\"left\")\r\nif geneMulti == \"yes\":\r\n    transDataGene[\"id\"] = transDataGene[\"id\"].apply(trans_int)\r\n    transDataGene = transDataGene.sort_values(by=\"id\").drop_duplicates(subset= [\"order\"]).sort_values(by=\"order\")\r\n    transDataGene[\"id\"] = transDataGene[\"id\"].apply(trans_str)\r\ntransDataGene = transDataGene[[\"id\"]]    \r\nannoFileList = annoFileList.split(\",\")\r\nfor annoFile in annoFileList:\r\n    anno = pd.read_csv(os.path.join(annoPath,\"DB\"+annoFile+\".csv.gz\"),dtype=\"str\")\r\n    for i in anno.columns:\r\n        if i != \"id\":\r\n            print({i:annoFile+\"_\"+i})\r\n            anno.rename(columns={i:annoFile+\"_\"+i},inplace=True)\r\n    transDataGene = pd.merge(transDataGene,anno,on=\"id\",how=\"left\")\r\ntransData = pd.concat([transData,transDataGene.drop(\"id\",axis =1)],axis=1)\r\ntransData.fillna(\".\",inplace=True)\r\n\r\nread_data(output,write = True,writeData = transData)\r\n# import time \r\n# time.sleep(100)",
                                "writable": false
                            }
                        ]
                    },
                    {
                        "class": "InlineJavascriptRequirement"
                    }
                ]
            },
            "label": "geneAnno",
            "sbg:x": 406.4539794921875,
            "sbg:y": 1051.4134521484375
        },
        {
            "id": "new_annovar_function",
            "in": [
                {
                    "id": "raw_vcf",
                    "source": "raw_vcf"
                },
                {
                    "id": "annovar_db",
                    "source": "annovar_db"
                },
                {
                    "id": "ref_version",
                    "source": "ref_version"
                },
                {
                    "id": "splicing_threshold",
                    "source": "splicing_threshold"
                },
                {
                    "id": "output",
                    "source": "output"
                }
            ],
            "out": [
                {
                    "id": "output_vcf"
                },
                {
                    "id": "output_txt"
                },
                {
                    "id": "output_avinput"
                }
            ],
            "run": {
                "class": "CommandLineTool",
                "cwlVersion": "v1.0",
                "$namespaces": {
                    "sbg": "https://www.sevenbridges.com/"
                },
                "id": "new_annovar_function",
                "baseCommand": [
                    "table_annovar.pl"
                ],
                "inputs": [
                    {
                        "id": "raw_vcf",
                        "type": "File?",
                        "inputBinding": {
                            "position": 1
                        }
                    },
                    {
                        "id": "annovar_db",
                        "type": "Directory?",
                        "inputBinding": {
                            "position": 2
                        }
                    },
                    {
                        "id": "ref_version",
                        "type": "string?",
                        "inputBinding": {
                            "position": 3,
                            "prefix": "-buildver"
                        }
                    },
                    {
                        "default": "refGene,avsnp150,popfreq_all_20150413,gnomad211_exome,clinvar_20210501,dbnsfp42a,rmsk,tfbsConsSites,intervar_20180118",
                        "id": "protocol",
                        "type": "string?",
                        "inputBinding": {
                            "position": 4,
                            "prefix": "-protocol"
                        }
                    },
                    {
                        "default": "g,f,f,f,f,f,r,r,f",
                        "id": "operation",
                        "type": "string?",
                        "inputBinding": {
                            "position": 5,
                            "prefix": "-operation"
                        }
                    },
                    {
                        "default": ".",
                        "id": "NA_string",
                        "type": "string?",
                        "inputBinding": {
                            "position": 6,
                            "prefix": "-nastring"
                        }
                    },
                    {
                        "id": "splicing_threshold",
                        "type": "int?",
                        "inputBinding": {
                            "position": 7,
                            "prefix": "-intronhgvs"
                        }
                    },
                    {
                        "default": true,
                        "id": "rm_tmp",
                        "type": "boolean?",
                        "inputBinding": {
                            "position": 8,
                            "prefix": "-remove"
                        }
                    },
                    {
                        "default": true,
                        "id": "confirm_vcfinput",
                        "type": "boolean?",
                        "inputBinding": {
                            "position": 9,
                            "prefix": "-vcfinput"
                        }
                    },
                    {
                        "id": "output",
                        "type": "string?",
                        "inputBinding": {
                            "position": 11,
                            "prefix": "-out"
                        }
                    },
                    {
                        "default": true,
                        "id": "other_info",
                        "type": "boolean?",
                        "inputBinding": {
                            "position": 10,
                            "prefix": "-otherinfo"
                        }
                    }
                ],
                "outputs": [
                    {
                        "id": "output_vcf",
                        "type": "File?",
                        "outputBinding": {
                            "glob": "$(inputs.output)*_multianno.vcf"
                        }
                    },
                    {
                        "id": "output_txt",
                        "type": "File?",
                        "outputBinding": {
                            "glob": "$(inputs.output)*_multianno.txt"
                        }
                    },
                    {
                        "id": "output_avinput",
                        "type": "File?",
                        "outputBinding": {
                            "glob": "$(inputs.output).avinput"
                        }
                    }
                ],
                "label": "New_annovar_function",
                "requirements": [
                    {
                        "class": "DockerRequirement",
                        "dockerPull": "harbor.bio-it.cn:5000/library/annovar:latest"
                    },
                    {
                        "class": "InlineJavascriptRequirement"
                    }
                ]
            },
            "label": "New_annovar_function",
            "sbg:x": 411.7004699707031,
            "sbg:y": 98.35729217529297
        },
        {
            "id": "txt2vcf",
            "in": [
                {
                    "id": "txt2vcf_file",
                    "source": "new_annovar_filter/sample_name"
                },
                {
                    "id": "Trans_result",
                    "default": "Filterd_Transed.vcf",
                    "source": "Trans_result"
                },
                {
                    "id": "input_vcf",
                    "source": "raw_vcf"
                }
            ],
            "out": [
                {
                    "id": "filter_transed_vcf"
                }
            ],
            "run": {
                "class": "CommandLineTool",
                "cwlVersion": "v1.0",
                "$namespaces": {
                    "sbg": "https://www.sevenbridges.com/"
                },
                "id": "txt2vcf",
                "baseCommand": [
                    "perl",
                    "txt2vcf.pl"
                ],
                "inputs": [
                    {
                        "id": "txt2vcf_file",
                        "type": "File?",
                        "inputBinding": {
                            "position": 1
                        }
                    },
                    {
                        "id": "Trans_result",
                        "type": "string?",
                        "inputBinding": {
                            "position": 2
                        }
                    },
                    {
                        "id": "input_vcf",
                        "type": "File?",
                        "inputBinding": {
                            "position": 0
                        }
                    }
                ],
                "outputs": [
                    {
                        "id": "filter_transed_vcf",
                        "type": "File?",
                        "outputBinding": {
                            "glob": "$(inputs.Trans_result)"
                        }
                    }
                ],
                "label": "txt2vcf",
                "requirements": [
                    {
                        "class": "DockerRequirement",
                        "dockerPull": "centos/perl-526-centos7:latest"
                    },
                    {
                        "class": "InitialWorkDirRequirement",
                        "listing": [
                            {
                                "entryname": "txt2vcf.pl",
                                "entry": "      \n#!/usr/bin/env perl\nuse warnings;\nuse strict;\nuse Pod::Usage;\nuse Getopt::Long;\nuse File::Basename;\nuse File::Spec;\n\nour $DATE =\t'$Date: 2020-06-08 00:46:07 -0400 (Mon,  8 Jun 2020) $';\nmy $queryfile=$ARGV[0];\nmy $annMuta=$ARGV[1];\nour $outfile=$ARGV[2];\nsub backConvertVCF {\n\tmy ($multiannofile, $vcfin) = @_;\n\topen (MANNO, $multiannofile) or die \"Error: cannot read from multianno file $multiannofile: $!\\n\";\n\tprint STDERR \"NOTICE: Reading from $multiannofile\\n\";\n\t$_ = <MANNO>;\n\ts/[\\r\\n]+$//;\n\ts/Otherinfo1.+/Otherinfo/;\t\t#20191010: now that we chagned \"Otherinfo\" to \"Otherinfo1 Otherinfo2 Otherinfo3\" etc, to keep the program working, we have to do some trick here to only keep the first Otherinfo\n\tmy @name = split (/\\t/, $_);\n\t$name[$#name] =~ m/^Otherinfo/ or die \"Error: the last column in header row should start with 'Otherinfo'\\n\";\n    \n\tmy @nextrecord;\n\tmy (@field, @prefield);\n\tmy ($anno_string, $pre_anno_string);\n\n\topen (OUT, \">$outfile\") or die \"Error: cannot write to output file $outfile\\n\";\n\tprint STDERR \"-----------------------------------------------------------------\\n\";\n\tprint STDERR \"NOTICE: VCF output is written to $outfile \\n\";\n\n\t#open (IN, $vcfin) or die \"Error: cannot read from input VCF file $vcfin: $!\\n\";\n\n\tif ($vcfin =~ m/\\.gz$/) {\t\t#handle vcf.gz file\n\t\topen (IN, \"gunzip -c $vcfin |\") or die \"Error: cannot read from input VCF file $vcfin: $!\\n\";\n\t} else {\n\t\topen (IN, $vcfin) or die \"Error: cannot read from input VCF file $vcfin: $!\\n\";\n\t}\n\n\twhile (<IN>) {\n\t\ts/[\\r\\n]+$//;\n\t\tif (m/^##/) {\n\t\t\tprint OUT $_, \"\\n\";\n\t\t} elsif (m/^#CHROM/) {\n\t\t\tprint OUT qq{##INFO=<ID=ANNOVAR_DATE,Number=1,Type=String,Description=\"Flag the start of ANNOVAR annotation for one alternative allele\">\\n};\n\t\t\tfor my $i (0 .. @name-1) {\n\t\t\t\tif ($name[$i] =~ m/^(Chr|Start|End|Ref|Alt)$/) {\n\t\t\t\t\t1;\t\t\t\t\t#these are annovar input and are not in INFO field when printed out\n\t\t\t\t} elsif ($name[$i] =~ m/^(1000g\\d+|esp\\d+|cg\\d+|popfreq|nci\\d+|ExAC|gnomAD)/) {\n\t\t\t\t\tprint OUT qq{##INFO=<ID=$name[$i],Number=1,Type=Float,Description=\"$name[$i] annotation provided by ANNOVAR\">\\n};\n\t\t\t\t} elsif ($name[$i] =~ m/^Otherinfo/) {\t\t#this is the field that stores VCF information, and will not be in the annotation in INFO field\n\t\t\t\t\t1;\n\t\t\t\t} else {\n\t\t\t\t\tprint OUT qq{##INFO=<ID=$name[$i],Number=.,Type=String,Description=\"$name[$i] annotation provided by ANNOVAR\">\\n};\n\t\t\t\t}\n\t\t\t}\n\t\t\tprint OUT qq{##INFO=<ID=ALLELE_END,Number=0,Type=Flag,Description=\"Flag the end of ANNOVAR annotation for one alternative allele\">\\n};\n\t\t\tprint OUT $_, \"\\n\";\n\t\t\tlast;\n\t\t} elsif (m/^#/) {\n\t\t\tprint OUT $_, \"\\n\";\n\t\t} else {\n\t\t\tlast;\t\t#could be a VCF file without a valid head line\n\t\t}\n\t}\n\tclose (IN);\n\n\twhile (<MANNO>) {\n\t\ts/[\\r\\n]+$//;\n\t\tmy $anno_string;\n\t\t@field = split (/\\t/, $_);\n\n\t\tif ($DATE =~ m/Date: (\\d+\\-\\d+\\-\\d+)/) {\n\t\t\t$anno_string = \";ANNOVAR_DATE=$1\";\n\t\t} else {\n\t\t\t$anno_string = \";ANNOVAR_DATE=UNKNOWN\";\n\t\t}\n\t\tfor my $i (5 .. @name-2) {\t\t#these are all the annotation columns (starting from 6th column to the last one, which is Otherinfo which will not be written)\n\t\t\t$field[$i] =~ s/\\s/_/g;\t\t#convert 'nonsynonymous SNV' to 'nonsynonymous' as space is not allowed in VCF INFO field, yet _ is easier to view for users\n\t\t\t$field[$i] =~ s/;/\\\\x3b/g;\t#; is not allowed in VCF INFO field\n\t\t\t$field[$i] =~ s/=/\\\\x3d/g;\t#= is not allowed in VCF INFO field\n\t\t\t$anno_string .= \";$name[$i]=$field[$i]\";\t#the 8th column in Otherinfo is INFO column (plus the freq, quality, dp column)\n\t\t}\n\t\t$anno_string .= \";ALLELE_END\";\n\n\t\tdefined $field[@name+3] or die \"field not defined for @name\";\n\t\t@prefield and (defined $prefield[$#field] or die \"prefield not defined (@prefield) with field=\" . scalar(@field) . \" and prefield=\" . scalar(@prefield));\n\t\tif (@prefield and join (\"\\t\", @field[@name+3 .. $#field]) eq join (\"\\t\", @prefield[@name+3 .. $#field])) {\t\t#same locus, multiple alternative allele\n\t\t\t$pre_anno_string .= $anno_string;\n\n\t\t} else {\n\t\t\tif (@prefield) {\n\t\t\t\t$prefield[@name+9] .= $pre_anno_string;\t\t#update INFO field\n\t\t\t\tprint OUT join (\"\\t\", @prefield[@name+2 .. $#prefield]), \"\\n\";\n\t\t\t}\n\n\t\t\t@prefield = @field;\n\t\t\t$pre_anno_string = $anno_string;\n\t\t}\n\t}\n\t$prefield[@name+9] .= $pre_anno_string;\n\tprint OUT join (\"\\t\", @prefield[@name+2 .. $#prefield]), \"\\n\";\n}\n\nbackConvertVCF ($annMuta, $queryfile);",
                                "writable": true
                            }
                        ]
                    },
                    {
                        "class": "InlineJavascriptRequirement"
                    }
                ]
            },
            "label": "txt2vcf",
            "sbg:x": 1057,
            "sbg:y": 636.9251098632812
        },
        {
            "id": "picard",
            "in": [
                {
                    "id": "unsort_VCF",
                    "source": "txt2vcf/filter_transed_vcf"
                },
                {
                    "id": "output_filename",
                    "default": "Filterd_Transed_Sorted.vcf"
                }
            ],
            "out": [
                {
                    "id": "Sorted_vcf"
                }
            ],
            "run": {
                "class": "CommandLineTool",
                "cwlVersion": "v1.0",
                "$namespaces": {
                    "sbg": "https://www.sevenbridges.com/"
                },
                "id": "picard",
                "baseCommand": [
                    "java",
                    "-jar",
                    "/usr/picard/picard.jar",
                    "SortVcf"
                ],
                "inputs": [
                    {
                        "id": "unsort_VCF",
                        "type": "File?",
                        "inputBinding": {
                            "position": 0,
                            "prefix": "I=",
                            "separate": false
                        }
                    },
                    {
                        "id": "output_filename",
                        "type": "string?",
                        "inputBinding": {
                            "position": 1,
                            "prefix": "O=",
                            "separate": false
                        }
                    }
                ],
                "outputs": [
                    {
                        "id": "Sorted_vcf",
                        "type": "File?",
                        "outputBinding": {
                            "glob": "$(inputs.output_filename)"
                        }
                    }
                ],
                "label": "picard",
                "requirements": [
                    {
                        "class": "DockerRequirement",
                        "dockerPull": "harbor.bio-it.cn:5000/library/picard:2.24.2"
                    },
                    {
                        "class": "InlineJavascriptRequirement"
                    }
                ]
            },
            "label": "picard",
            "sbg:x": 1205.4615478515625,
            "sbg:y": 480.5859375
        },
        {
            "id": "bgzip",
            "in": [
                {
                    "id": "input",
                    "source": "picard/Sorted_vcf"
                }
            ],
            "out": [
                {
                    "id": "gz_vcf"
                }
            ],
            "run": {
                "class": "CommandLineTool",
                "cwlVersion": "v1.0",
                "$namespaces": {
                    "sbg": "https://www.sevenbridges.com/"
                },
                "id": "bgzip",
                "baseCommand": [
                    "bgzip"
                ],
                "inputs": [
                    {
                        "id": "input",
                        "type": "File?",
                        "inputBinding": {
                            "position": 0
                        }
                    }
                ],
                "outputs": [
                    {
                        "id": "gz_vcf",
                        "type": "File?",
                        "outputBinding": {
                            "glob": "*.vcf.gz"
                        }
                    }
                ],
                "label": "bgzip",
                "requirements": [
                    {
                        "class": "DockerRequirement",
                        "dockerPull": "harbor.bio-it.cn:5000/library/tabix:1.11--hdfd78af_0"
                    },
                    {
                        "class": "InitialWorkDirRequirement",
                        "listing": [
                            "$(inputs.input)"
                        ]
                    },
                    {
                        "class": "InlineJavascriptRequirement"
                    }
                ]
            },
            "label": "bgzip",
            "sbg:x": 1418.2115478515625,
            "sbg:y": 480.5859375
        },
        {
            "id": "tabix",
            "in": [
                {
                    "id": "GZ_Sorted_VCF",
                    "source": "bgzip/gz_vcf"
                }
            ],
            "out": [
                {
                    "id": "VCF_o_gz"
                }
            ],
            "run": {
                "class": "CommandLineTool",
                "cwlVersion": "v1.0",
                "$namespaces": {
                    "sbg": "https://www.sevenbridges.com/"
                },
                "id": "tabix",
                "baseCommand": [
                    "tabix",
                    "-p",
                    "vcf"
                ],
                "inputs": [
                    {
                        "id": "GZ_Sorted_VCF",
                        "type": "File?",
                        "inputBinding": {
                            "position": 0
                        }
                    }
                ],
                "outputs": [
                    {
                        "id": "VCF_o_gz",
                        "type": "File?",
                        "outputBinding": {
                            "glob": "*.vcf.gz"
                        },
                        "secondaryFiles": [
                            ".tbi"
                        ]
                    }
                ],
                "label": "tabix",
                "requirements": [
                    {
                        "class": "DockerRequirement",
                        "dockerPull": "harbor.bio-it.cn:5000/library/tabix:1.11--hdfd78af_0"
                    },
                    {
                        "class": "InitialWorkDirRequirement",
                        "listing": [
                            "$(inputs.GZ_Sorted_VCF)"
                        ]
                    },
                    {
                        "class": "InlineJavascriptRequirement"
                    }
                ]
            },
            "label": "tabix",
            "sbg:x": 1571.7896728515625,
            "sbg:y": 480.5859375
        },
        {
            "id": "new_annovar_filter",
            "in": [
                {
                    "id": "Input_file",
                    "source": "geneanno/output_1"
                },
                {
                    "id": "sample_name_in",
                    "source": "output"
                },
                {
                    "id": "maf_threshold",
                    "source": "maf_threshold"
                }
            ],
            "out": [
                {
                    "id": "sample_name"
                }
            ],
            "run": {
                "class": "CommandLineTool",
                "cwlVersion": "v1.0",
                "$namespaces": {
                    "sbg": "https://www.sevenbridges.com/"
                },
                "id": "new_annovar_filter",
                "baseCommand": [
                    "Rscript",
                    "Merge_res.R"
                ],
                "inputs": [
                    {
                        "id": "Input_file",
                        "type": "File?",
                        "inputBinding": {
                            "position": 0
                        }
                    },
                    {
                        "id": "sample_name_in",
                        "type": "string?",
                        "inputBinding": {
                            "position": 1
                        }
                    },
                    {
                        "id": "maf_threshold",
                        "type": "float?",
                        "inputBinding": {
                            "position": 2
                        }
                    }
                ],
                "outputs": [
                    {
                        "id": "sample_name",
                        "type": "File?",
                        "outputBinding": {
                            "glob": "$(inputs.sample_name_in).filterd.txt"
                        }
                    }
                ],
                "label": "New_annovar_filter",
                "requirements": [
                    {
                        "class": "DockerRequirement",
                        "dockerPull": "harbor.bio-it.cn:5000/library/variminer_r4.0:latest"
                    },
                    {
                        "class": "InitialWorkDirRequirement",
                        "listing": [
                            {
                                "entryname": "Merge_res.R",
                                "entry": "#!/usr/bin/Rscript\n#repos='https://mirrors.ustc.edu.cn/CRAN/'\n#Dowload pkg\n#install.packages('readr',repos=repos)\n#install.packages('dplyr',repos=repos)\n#install.packages('stringr',repos=repos)\n\n\n#Library\nlibrary(readr)\nlibrary(dplyr)\nlibrary(stringr)\n\n#arg\narg <- commandArgs(TRUE)\ninput_file <-arg[1]\nsample_name <- arg[2]\nmaf_cutoff <- arg[3]\n# Start filtering \na <- read_delim(file = input_file , '\\t', escape_double = FALSE, trim_ws = TRUE )\nmax_freq <- apply(a[,c(13,16,19,22,27,29,31,39)],1,max, na.rm = F )\na$max_maf <- max_freq\na_exmpt_CLN <- a %>% filter(str_detect(CLNSIG,'genic'))\na_exmpt_Inter <- a %>% filter(str_detect(InterVar_automated,'genic'))\na_num <- a[which(a$max_maf!='.'),]\na_string <- a[which(a$max_maf=='.'),]\nstr(a_num$max_maf)\na$max_maf[which(a_num$max_maf =='1.')]='1'\na$max_maf[which(a_num$max_maf =='0.')]='0'\na_num$max_maf <- as.numeric(a_num$max_maf)\nstr(a_num$max_maf)\n\ntable(a$Func.refGene)\nfilter_rule_region <- c(\"intergenic\",\"intron\",\"intronic\",\"ncRNA_intronic\",\"ncRNA_exonic\",\"ncRNA_exonic;splicing\",\"ncRNA_splicing\",\"ncRNA_UTR5\",\"UTR3\",\"UTR5\",'upstream;downstream',' upstream',\n                        'UTR3;UTR5','UTR5;UTR3','downstream')\nfilter_res_region_num <- filter(a_num,!(Func.refGene %in% filter_rule_region ))\nfilter_res_region_string <- filter(a_string,!(Func.refGene %in% filter_rule_region ))\nfilter_rule_function <- c('synonymous SNV')\nfilter_res_function_string <- filter(filter_res_region_string,!(ExonicFunc.refGene %in% filter_rule_function ))\nfilter_res_function_num <- filter(filter_res_region_num,!(ExonicFunc.refGene %in% filter_rule_function ))\n\nfilter_res_MAF_num <- filter_res_function_num[which(filter_res_function_num$max_maf < maf_cutoff),]\nfilter_res_MAF_string <- filter_res_function_string[which(filter_res_function_string$max_maf < maf_cutoff),]\n\nfilter_res_MAF <- rbind(filter_res_MAF_num,filter_res_MAF_string,a_exmpt_CLN,a_exmpt_Inter)\nfinal_res <- cbind(filter_res_MAF[,1:190],filter_res_MAF[,204:218],filter_res_MAF[,191:203])\nwrite.table(final_res,paste(sample_name,'.filterd.txt',sep=''),row.names = F,sep = '\\t',quote = F)\n",
                                "writable": true
                            }
                        ]
                    },
                    {
                        "class": "InlineJavascriptRequirement"
                    }
                ]
            },
            "label": "New_annovar_filter",
            "sbg:x": 818.0343017578125,
            "sbg:y": 891.6552124023438
        },
        {
            "id": "exomiser_res_get",
            "in": [
                {
                    "id": "exomiser_json_res",
                    "source": "analysis_single_exomiser_wf_v1/json"
                },
                {
                    "id": "exomiser_tsv_res",
                    "source": "analysis_single_exomiser_wf_v1/adgene"
                },
                {
                    "id": "exomiser_extract_result_name",
                    "source": "exomiser_extract_result_name"
                }
            ],
            "out": [
                {
                    "id": "extracted_result"
                }
            ],
            "run": {
                "class": "CommandLineTool",
                "cwlVersion": "v1.0",
                "$namespaces": {
                    "sbg": "https://www.sevenbridges.com/"
                },
                "id": "exomiser_res_get",
                "baseCommand": [
                    "python",
                    "extract.py"
                ],
                "inputs": [
                    {
                        "id": "exomiser_json_res",
                        "type": "File?",
                        "inputBinding": {
                            "position": 0
                        }
                    },
                    {
                        "id": "exomiser_tsv_res",
                        "type": "File?",
                        "inputBinding": {
                            "position": 1
                        }
                    },
                    {
                        "id": "exomiser_extract_result_name",
                        "type": "string?",
                        "inputBinding": {
                            "position": 2
                        }
                    }
                ],
                "outputs": [
                    {
                        "id": "extracted_result",
                        "type": "File?",
                        "outputBinding": {
                            "glob": "*.csv"
                        }
                    }
                ],
                "label": "exomiser_res_get",
                "requirements": [
                    {
                        "class": "DockerRequirement",
                        "dockerPull": "harbor.bio-it.cn:5000/library/r_packages:v2"
                    },
                    {
                        "class": "InitialWorkDirRequirement",
                        "listing": [
                            {
                                "entryname": "extract.py",
                                "entry": "import json\nimport pandas as pd\nimport os\nimport numpy as np\nimport sys\n\n##定义inheritance dict\nInheritanceDict = {\"AUTOSOMAL_DOMINANT\":\"AD\",\"AUTOSOMAL_RECESSIVE\":\"AR\",\"X_DOMINANT\":\"XD\",\"X_RECESSIVE\":\"XR\",\"MITOCHONDRIAL\":\"MT\",\"UNKNOWN\":\"un\"}\n\n\n#fileJson = \"Pfeiffer-hiphive-exome-PASS_ONLY.json\"\n#fileTsv = \"Pfeiffer-hiphive-exome-PASS_ONLY_AD.variants.tsv\"\n\nfileJson = sys.argv[1]   ##json文件\nfileTsv = sys.argv[2]    ##任意一 *.variants.tsv 文件\noutput = sys.argv[3]     ##输出文件名\n\n##读取json文件提取基因、遗传模式、相关疾病，打分；\nwith open(fileJson, \"r\") as f:\n    data = json.load(f)\n    \ngeneData = pd.DataFrame(data)[[\"geneSymbol\",\"combinedScore\",\"compatibleInheritanceModes\",\"associatedDiseases\"]]\n\ndef inherit(x):\n    if len(x) > 0:\n        tmp = []\n        for i in x:\n            tmp.append(InheritanceDict[i])\n        return \";\".join(tmp)\n    else:\n        return np.nan\n\ngeneData[\"InheritanceModes\"] = geneData[\"compatibleInheritanceModes\"].apply(lambda x:inherit(x))\n\ndef diseaseI (x):\n    if type(x) == list :\n        if len(x) > 0:\n            tmp = []\n            for i in x:\n                diseaseInfo =  i[\"diseaseId\"] + \" \" + i[\"diseaseName\"] + \"-\" + i[\"inheritanceMode\"].lower()\n                tmp.append(diseaseInfo)\n            return \";\".join(tmp)\n        else:\n            return np.nan\n    else:\n        if pd.isnull(x):\n            return np.nan\n\n\ngeneData[\"Diseases\"] = geneData[\"associatedDiseases\"].apply(lambda x:diseaseI(x))\n\ngeneData = geneData.sort_values([\"combinedScore\"],ascending=False)\n\ngeneData[\"exomiserRank\"] = range(1,len(geneData)+1)\ngeneData.drop(columns = [\"compatibleInheritanceModes\",\"associatedDiseases\"],inplace=True)\n##获取基因对应的位置信息\nvarPosi = pd.read_csv(fileTsv,sep=\"\\t\",usecols= [\"#CHROM\",\"POS\",\"REF\",\"ALT\",\"EXOMISER_GENE\"])\nvarPosi.rename(columns = {\"EXOMISER_GENE\":\"geneSymbol\"},inplace = True)\n\n\ndataMerge = pd.merge(varPosi,geneData,on = \"geneSymbol\",how=\"left\")\ndataMerge.to_csv(output,index=False,na_rep=\".\")",
                                "writable": false
                            }
                        ]
                    }
                ]
            },
            "label": "exomiser_res_get",
            "sbg:x": 2236.723876953125,
            "sbg:y": 517.8970336914062
        },
        {
            "id": "analysis_single_exomiser_wf_v1",
            "in": [
                {
                    "id": "vcf",
                    "source": "tabix/VCF_o_gz"
                },
                {
                    "id": "version",
                    "source": "version"
                },
                {
                    "id": "outpref",
                    "source": "outpref"
                },
                {
                    "id": "maxFreq",
                    "source": "maxFreq"
                },
                {
                    "id": "hpoIds",
                    "source": [
                        "hpoIds"
                    ]
                },
                {
                    "id": "genomeAssembly",
                    "source": "ref_version"
                },
                {
                    "id": "dirdata",
                    "source": "dirdata"
                },
                {
                    "id": "yml",
                    "source": "yml"
                }
            ],
            "out": [
                {
                    "id": "xrVCF"
                },
                {
                    "id": "xrgenevar"
                },
                {
                    "id": "xdVCF"
                },
                {
                    "id": "xdgenevar"
                },
                {
                    "id": "mtVCF"
                },
                {
                    "id": "mtgenevar"
                },
                {
                    "id": "json"
                },
                {
                    "id": "html"
                },
                {
                    "id": "arVCF"
                },
                {
                    "id": "argenevar"
                },
                {
                    "id": "adVCF"
                },
                {
                    "id": "adgene"
                },
                {
                    "id": "adgenec"
                }
            ],
            "run": {
                "class": "Workflow",
                "cwlVersion": "v1.0",
                "id": "analysis_single_exomiser_wf_v1",
                "label": "analysis_single_exomiser.wf_v1",
                "$namespaces": {
                    "sbg": "https://www.sevenbridges.com/"
                },
                "inputs": [
                    {
                        "id": "vcf",
                        "type": "File?",
                        "secondaryFiles": [
                            ".tbi"
                        ],
                        "sbg:x": -702.5,
                        "sbg:y": -191.5
                    },
                    {
                        "id": "version",
                        "type": "string?",
                        "sbg:x": -624.5,
                        "sbg:y": -399.5
                    },
                    {
                        "id": "outpref",
                        "type": "string?",
                        "sbg:x": -719.5,
                        "sbg:y": -80
                    },
                    {
                        "id": "maxFreq",
                        "type": "float?",
                        "sbg:x": -787,
                        "sbg:y": 69
                    },
                    {
                        "id": "hpoIds",
                        "type": "string[]?",
                        "sbg:x": -835.5,
                        "sbg:y": 228.5
                    },
                    {
                        "id": "genomeAssembly",
                        "type": "string?",
                        "sbg:x": -774.5,
                        "sbg:y": 364.5
                    },
                    {
                        "id": "dirdata",
                        "type": "Directory?",
                        "sbg:x": -512.5,
                        "sbg:y": 400
                    },
                    {
                        "id": "yml",
                        "type": "File?",
                        "sbg:x": -257.361328125,
                        "sbg:y": -921.254638671875
                    }
                ],
                "outputs": [
                    {
                        "id": "xrVCF",
                        "outputSource": [
                            "singleexomiser/xrVCF"
                        ],
                        "type": "File?",
                        "sbg:x": 135.8336639404297,
                        "sbg:y": -434.8744812011719
                    },
                    {
                        "id": "xrgenevar",
                        "outputSource": [
                            "singleexomiser/xrgenevar"
                        ],
                        "type": "File[]?",
                        "sbg:x": 289.71429443359375,
                        "sbg:y": -286.8571472167969
                    },
                    {
                        "id": "xdVCF",
                        "outputSource": [
                            "singleexomiser/xdVCF"
                        ],
                        "type": "File?",
                        "sbg:x": 474.28570556640625,
                        "sbg:y": -233.57142639160156
                    },
                    {
                        "id": "xdgenevar",
                        "outputSource": [
                            "singleexomiser/xdgenevar"
                        ],
                        "type": "File[]?",
                        "sbg:x": 557.1428833007812,
                        "sbg:y": -158.7142791748047
                    },
                    {
                        "id": "mtVCF",
                        "outputSource": [
                            "singleexomiser/mtVCF"
                        ],
                        "type": "File?",
                        "sbg:x": 610.4285888671875,
                        "sbg:y": -43.14285659790039
                    },
                    {
                        "id": "mtgenevar",
                        "outputSource": [
                            "singleexomiser/mtgenevar"
                        ],
                        "type": "File[]?",
                        "sbg:x": 682.2857055664062,
                        "sbg:y": 6.285714149475098
                    },
                    {
                        "id": "json",
                        "outputSource": [
                            "singleexomiser/json"
                        ],
                        "type": "File?",
                        "sbg:x": 1001.8373413085938,
                        "sbg:y": 104.14286041259766
                    },
                    {
                        "id": "html",
                        "outputSource": [
                            "singleexomiser/html"
                        ],
                        "type": "File?",
                        "sbg:x": 667.4285888671875,
                        "sbg:y": 167.7142791748047
                    },
                    {
                        "id": "arVCF",
                        "outputSource": [
                            "singleexomiser/arVCF"
                        ],
                        "type": "File?",
                        "sbg:x": 582.9782104492188,
                        "sbg:y": 266.7021789550781
                    },
                    {
                        "id": "argenevar",
                        "outputSource": [
                            "singleexomiser/argenevar"
                        ],
                        "type": "File[]?",
                        "sbg:x": 681.264404296875,
                        "sbg:y": 401.51153564453125
                    },
                    {
                        "id": "adVCF",
                        "outputSource": [
                            "singleexomiser/adVCF"
                        ],
                        "type": "File?",
                        "sbg:x": 672,
                        "sbg:y": 548.2857055664062
                    },
                    {
                        "id": "adgene",
                        "outputSource": [
                            "singleexomiser/adgene"
                        ],
                        "type": "File?",
                        "sbg:x": 251.45201110839844,
                        "sbg:y": 708.077392578125
                    },
                    {
                        "id": "adgenec",
                        "outputSource": [
                            "singleexomiser/adgenec"
                        ],
                        "type": "File?",
                        "sbg:x": 287.28875732421875,
                        "sbg:y": 450.92303466796875
                    }
                ],
                "steps": [
                    {
                        "id": "prepareexmiser_input",
                        "in": [
                            {
                                "id": "dirdata",
                                "source": "dirdata"
                            },
                            {
                                "id": "yml",
                                "source": "yml"
                            },
                            {
                                "id": "hpoIds",
                                "source": [
                                    "hpoIds"
                                ]
                            },
                            {
                                "id": "genomeAssembly",
                                "source": "genomeAssembly"
                            },
                            {
                                "id": "outpref",
                                "source": "outpref"
                            },
                            {
                                "id": "vcf",
                                "source": "vcf"
                            },
                            {
                                "id": "maxFreq",
                                "source": "maxFreq"
                            },
                            {
                                "id": "version",
                                "source": "version"
                            }
                        ],
                        "out": [
                            {
                                "id": "yamloutput"
                            }
                        ],
                        "run": {
                            "class": "CommandLineTool",
                            "cwlVersion": "v1.0",
                            "$namespaces": {
                                "sbg": "https://www.sevenbridges.com/"
                            },
                            "id": "prepareexmiser_input",
                            "baseCommand": [
                                "python",
                                "exomiserInput.py"
                            ],
                            "inputs": [
                                {
                                    "id": "dirdata",
                                    "type": "Directory?",
                                    "inputBinding": {
                                        "position": 1,
                                        "prefix": "--dirdata"
                                    }
                                },
                                {
                                    "id": "yml",
                                    "type": "File?",
                                    "inputBinding": {
                                        "position": 3,
                                        "prefix": "--yml"
                                    }
                                },
                                {
                                    "id": "hpoIds",
                                    "type": "string[]?",
                                    "inputBinding": {
                                        "position": 4,
                                        "prefix": "--hpoIds",
                                        "itemSeparator": ","
                                    }
                                },
                                {
                                    "id": "genomeAssembly",
                                    "type": "string?",
                                    "inputBinding": {
                                        "position": 5,
                                        "prefix": "--genomeAssembly"
                                    }
                                },
                                {
                                    "id": "outpref",
                                    "type": "string?",
                                    "inputBinding": {
                                        "position": 6,
                                        "prefix": "--outpref"
                                    }
                                },
                                {
                                    "id": "vcf",
                                    "type": "File?",
                                    "inputBinding": {
                                        "position": 7,
                                        "prefix": "--vcf"
                                    }
                                },
                                {
                                    "id": "maxFreq",
                                    "type": "float?",
                                    "inputBinding": {
                                        "position": 8,
                                        "prefix": "--maxFreq"
                                    }
                                },
                                {
                                    "id": "version",
                                    "type": "string?",
                                    "inputBinding": {
                                        "position": 9,
                                        "prefix": "--version"
                                    }
                                },
                                {
                                    "default": "test_analysis_exome.yml",
                                    "id": "outyaml",
                                    "type": "string?",
                                    "inputBinding": {
                                        "position": 10,
                                        "prefix": "--outyaml"
                                    }
                                }
                            ],
                            "outputs": [
                                {
                                    "id": "yamloutput",
                                    "type": "File?",
                                    "outputBinding": {
                                        "glob": "$(inputs.outyaml)"
                                    }
                                }
                            ],
                            "label": "prepareExmiser_input",
                            "requirements": [
                                {
                                    "class": "DockerRequirement",
                                    "dockerPull": "harbor.bio-it.cn:5000/library/r_packages:v2"
                                },
                                {
                                    "class": "InitialWorkDirRequirement",
                                    "listing": [
                                        {
                                            "entryname": "exomiserInput.py",
                                            "entry": "#!coding=utf-8\nimport pandas as pd\nimport json\nimport numpy as np\nimport os\nfrom optparse import OptionParser\nimport re\nimport yaml\n\n###param\nparser = OptionParser()\nparser.add_option(\"--dirdata\", dest=\"dirdata\", default=\"/mnt/datashare/reference_genome/Exomiser/exomiser-data\",help=\"exomiser.data-directory\")\nparser.add_option(\"--yml\",dest=\"yml\", default=\"/mnt/datashare/reference_genome/Exomiser/exomiser-config/test-analysis-exome.yml\", help=\"test-analysis-exome.yml\")\nparser.add_option(\"--hpoIds\", dest=\"hpoIds\",  help=\"input hpoids,comma split\")\nparser.add_option(\"--genomeAssembly\", dest=\"genomeAssembly\",  help=\"hg19 or hg38\")\nparser.add_option(\"--outpref\", dest=\"outpref\",  help=\"outputPrefix\")\nparser.add_option(\"--vcf\", dest=\"vcf\",  help=\"vcf input, tbi requre\")\nparser.add_option(\"--maxFreq\", dest=\"maxFreq\",  default= 1 , help=\"maxFreq\")\nparser.add_option(\"--analysisMode\", dest=\"analysisMode\",  default= \"PASS_ONLY\" , help=\"PASS_ONLY \")\nparser.add_option(\"--version\", dest=\"version\",  default= \"2109\" , help=\"data-version\")\nparser.add_option(\"--outyaml\", dest=\"outyaml\",   help=\"file name of output yaml\")\n\n#outapp = \"application.properties\"\n\n(options, args) = parser.parse_args()\nfor i in options.__dict__:\n    exec(i+ \" = options.\"+i)\n    \nprint(vcf)\n##yml读取\nymlf = open(yml,'r',encoding='utf-8')\nymlR = ymlf.read()\nymlInfo = yaml.load(ymlR,Loader=yaml.FullLoader)\n\n##对变量值进行替换\n###analysis参数值\nymlInfo[\"analysis\"][\"genomeAssembly\"] = genomeAssembly\nymlInfo[\"analysis\"][\"vcf\"] = vcf\nymlInfo[\"analysis\"][\"hpoIds\"]  = list(map(lambda x:x.strip(),hpoIds.split(\",\")))\nymlInfo[\"analysis\"][\"analysisMode\"]  = analysisMode\n\nfor i in ymlInfo[\"analysis\"][\"steps\"]:\n    if \"frequencyFilter\" in i.keys():\n        i[\"frequencyFilter\"][\"maxFrequency\"] = maxFreq\n        \n####outputOptions参数值\nymlInfo[\"outputOptions\"][\"outputPrefix\"] = outpref\n\n##yaml格式输出\naa = json.dumps(ymlInfo)\nbb = yaml.load(aa,Loader=yaml.FullLoader)\nfile1 = open(outyaml,\"w\")\nyaml.safe_dump(bb,file1,default_flow_style=False)\nymlf.close()\n\n##生成application.properties\n# outApp = open(outapp,'w',encoding='utf-8')\n# outApp.write(\"exomiser.data-directory=\" + dirdata + \"\\n\")\n# outApp.write(\"remm.version=0.3.1.post1\" + \"\\n\")\n# outApp.write(\"cadd.version=1.4\" + \"\\n\")\n# outApp.write(\"exomiser.\"+ genomeAssembly +\".data-version=\" + str(version)+ \"\\n\")\n# outApp.write(\"exomiser.\"+ genomeAssembly +\".variant-white-list-path=\"+ str(version) + \"_\"+ genomeAssembly + \"_clinvar_whitelist.tsv.gz\" + \"\\n\")\n# outApp.write(\"exomiser.phenotype.data-version=\" + str(version)+ \"\\n\")\n# outApp.close()\n\n",
                                            "writable": false
                                        }
                                    ]
                                },
                                {
                                    "class": "InlineJavascriptRequirement"
                                }
                            ]
                        },
                        "label": "prepareExmiser_input",
                        "sbg:x": -306,
                        "sbg:y": -25
                    },
                    {
                        "id": "singleexomiser",
                        "in": [
                            {
                                "id": "analysis",
                                "source": "prepareexmiser_input/yamloutput"
                            },
                            {
                                "id": "vcf",
                                "source": "vcf"
                            },
                            {
                                "id": "assembly",
                                "source": "genomeAssembly"
                            },
                            {
                                "id": "data",
                                "source": "dirdata"
                            },
                            {
                                "id": "version",
                                "source": "version"
                            },
                            {
                                "id": "outpref",
                                "source": "outpref"
                            }
                        ],
                        "out": [
                            {
                                "id": "html"
                            },
                            {
                                "id": "json"
                            },
                            {
                                "id": "adVCF"
                            },
                            {
                                "id": "adgene"
                            },
                            {
                                "id": "arVCF"
                            },
                            {
                                "id": "argenevar"
                            },
                            {
                                "id": "xdVCF"
                            },
                            {
                                "id": "xdgenevar"
                            },
                            {
                                "id": "xrVCF"
                            },
                            {
                                "id": "xrgenevar"
                            },
                            {
                                "id": "mtVCF"
                            },
                            {
                                "id": "mtgenevar"
                            },
                            {
                                "id": "adgenec"
                            }
                        ],
                        "run": {
                            "class": "CommandLineTool",
                            "cwlVersion": "v1.0",
                            "$namespaces": {
                                "sbg": "https://www.sevenbridges.com/"
                            },
                            "id": "singleexomiser",
                            "baseCommand": [],
                            "inputs": [
                                {
                                    "id": "analysis",
                                    "type": "File?",
                                    "inputBinding": {
                                        "position": 1,
                                        "prefix": "--analysis"
                                    }
                                },
                                {
                                    "id": "vcf",
                                    "type": "File?",
                                    "inputBinding": {
                                        "position": 2,
                                        "prefix": "--vcf"
                                    },
                                    "secondaryFiles": [
                                        ".tbi"
                                    ]
                                },
                                {
                                    "id": "assembly",
                                    "type": "string?",
                                    "inputBinding": {
                                        "position": 3,
                                        "prefix": "--assembly"
                                    }
                                },
                                {
                                    "id": "data",
                                    "type": "Directory?",
                                    "inputBinding": {
                                        "position": 4,
                                        "prefix": "--exomiser.data-directory=",
                                        "separate": false
                                    }
                                },
                                {
                                    "id": "version",
                                    "type": "string?",
                                    "inputBinding": {
                                        "position": 7
                                    }
                                },
                                {
                                    "id": "outpref",
                                    "type": "string?"
                                }
                            ],
                            "outputs": [
                                {
                                    "id": "html",
                                    "type": "File?",
                                    "outputBinding": {
                                        "glob": "$(inputs.outpref)*.html"
                                    }
                                },
                                {
                                    "id": "json",
                                    "type": "File?",
                                    "outputBinding": {
                                        "glob": "$(inputs.outpref)*.json"
                                    }
                                },
                                {
                                    "id": "adVCF",
                                    "type": "File?",
                                    "outputBinding": {
                                        "glob": "$(inputs.outpref)*AD.vcf"
                                    }
                                },
                                {
                                    "id": "adgene",
                                    "type": "File?",
                                    "outputBinding": {
                                        "glob": "$(inputs.outpref)*AD.variants.tsv"
                                    }
                                },
                                {
                                    "id": "arVCF",
                                    "type": "File?",
                                    "outputBinding": {
                                        "glob": "$(inputs.outpref)*AR.vcf"
                                    }
                                },
                                {
                                    "id": "argenevar",
                                    "type": "File[]?",
                                    "outputBinding": {
                                        "glob": "$(inputs.outpref)*AR.*.tsv"
                                    }
                                },
                                {
                                    "id": "xdVCF",
                                    "type": "File?",
                                    "outputBinding": {
                                        "glob": "$(inputs.outpref)*XD.vcf"
                                    }
                                },
                                {
                                    "id": "xdgenevar",
                                    "type": "File[]?",
                                    "outputBinding": {
                                        "glob": "$(inputs.outpref)*XD.*.tsv"
                                    }
                                },
                                {
                                    "id": "xrVCF",
                                    "type": "File?",
                                    "outputBinding": {
                                        "glob": "$(inputs.outpref)*XR.vcf"
                                    }
                                },
                                {
                                    "id": "xrgenevar",
                                    "type": "File[]?",
                                    "outputBinding": {
                                        "glob": "$(inputs.outpref)*XR.*.tsv"
                                    }
                                },
                                {
                                    "id": "mtVCF",
                                    "type": "File?",
                                    "outputBinding": {
                                        "glob": "$(inputs.outpref)*MT.vcf"
                                    }
                                },
                                {
                                    "id": "mtgenevar",
                                    "type": "File[]?",
                                    "outputBinding": {
                                        "glob": "$(inputs.outpref)*MT.*.tsv"
                                    }
                                },
                                {
                                    "id": "adgenec",
                                    "type": "File?",
                                    "outputBinding": {
                                        "glob": "$(inputs.outpref)*AD.genes.tsv"
                                    }
                                }
                            ],
                            "label": "singleExomiser",
                            "arguments": [
                                {
                                    "position": 8,
                                    "prefix": "--exomiser.phenotype.data-version=",
                                    "separate": false,
                                    "valueFrom": "$(inputs.version)"
                                },
                                {
                                    "position": 10,
                                    "prefix": "--exomiser.",
                                    "separate": false,
                                    "valueFrom": "$(inputs.assembly).data-version=$(inputs.version)"
                                }
                            ],
                            "requirements": [
                                {
                                    "class": "DockerRequirement",
                                    "dockerPull": "harbor.bio-it.cn:5000/library/exomiser-cli:20220618"
                                },
                                {
                                    "class": "InitialWorkDirRequirement",
                                    "listing": [
                                        "$(inputs.vcf)"
                                    ]
                                },
                                {
                                    "class": "InlineJavascriptRequirement"
                                }
                            ]
                        },
                        "label": "singleExomiser",
                        "sbg:x": 49.598899841308594,
                        "sbg:y": 13.499991416931152
                    }
                ],
                "requirements": []
            },
            "label": "analysis_single_exomiser.wf_v1",
            "sbg:x": 1744.8970947265625,
            "sbg:y": 119.18408966064453
        },
        {
            "id": "merge_exomiser_annovar_res",
            "in": [
                {
                    "id": "default_col",
                    "source": [
                        "default_col"
                    ]
                },
                {
                    "id": "exomiser_res",
                    "source": "exomiser_res_get/extracted_result"
                },
                {
                    "id": "annovar_res",
                    "source": "new_annovar_filter/sample_name"
                }
            ],
            "out": [
                {
                    "id": "result_data"
                }
            ],
            "run": {
                "class": "CommandLineTool",
                "cwlVersion": "v1.0",
                "$namespaces": {
                    "sbg": "https://www.sevenbridges.com/"
                },
                "id": "merge_exomiser_annovar_res",
                "baseCommand": [
                    "Rscript",
                    "merge_result.R"
                ],
                "inputs": [
                    {
                        "id": "default_col",
                        "type": "string[]?",
                        "inputBinding": {
                            "position": 2,
                            "itemSeparator": " "
                        }
                    },
                    {
                        "id": "exomiser_res",
                        "type": "File?",
                        "inputBinding": {
                            "position": 0
                        }
                    },
                    {
                        "id": "annovar_res",
                        "type": "File?",
                        "inputBinding": {
                            "position": 1
                        }
                    }
                ],
                "outputs": [
                    {
                        "id": "result_data",
                        "type": "File?",
                        "outputBinding": {
                            "glob": "Final_variation_result.csv"
                        }
                    }
                ],
                "label": "merge_exomiser_annovar_res",
                "requirements": [
                    {
                        "class": "DockerRequirement",
                        "dockerPull": "harbor.bio-it.cn:5000/library/variminer_r4.0:latest"
                    },
                    {
                        "class": "InitialWorkDirRequirement",
                        "listing": [
                            {
                                "entryname": "merge_result.R",
                                "entry": "\nsuppressMessages(library(dplyr))\nsuppressMessages(library(stringr))\nsuppressMessages(library(readr))\n\nargs <- commandArgs(TRUE)\n\nexomiser_res <- args[1]\nannovar_res <- args[2]\ndefault_select_name <- args[3]\n#custom_select_name <- args[4]  \n\n#prepare file to use\nexomiser_res <- read.csv(exomiser_res)\nannovar_res <- read_delim(annovar_res,'\\t',escape_double = FALSE, trim_ws = TRUE)\ncolnames(exomiser_res)[1:5] <- c('Chr','Start','Ref','Alt','Gene_name')\nexomiser_res$Chr <- paste('chr',exomiser_res$Chr,sep = '')\nusd_result <- merge(exomiser_res,annovar_res,by.x = c('Chr','Start'),by.y = c('Chr','Otherinfo5'))\n  #calculate depth\nDepth <- as.data.frame(str_split(usd_result$Otherinfo13,\":\",n=5,simplify = T))\ncolnames(Depth) <- c('Genotype','Allele_Depth','Depth','Genotype_Quality','provieds_the_likelihoods_of_the_given_genotypes')\nallele_depth <- as.data.frame(str_split(Depth$Allele_Depth,',',n=2,simplify = T))\nDepth <- cbind(Depth,allele_depth)\nDepth$Depth <- as.integer(Depth$Depth)\nDepth$V1 <- as.integer(Depth$V1)\nDepth$WT_ratio <- Depth$V1/Depth$Depth\nDepth$`Hom;Het`<- 'Hom'\nDepth$`Hom;Het`[which(Depth$Genotype == '0/1')] = 'Het'\nDepth$`Hom;Het`[which(Depth$Genotype == '1/2')] = 'Het'\ntable(Depth$`Hom;Het`)\n\nsub_res_res_1 <- cbind(usd_result,Depth[,c(1:3,8:9)])\n\n# change intervar result format\n{sub_res_res_1$PVS1 <- paste('PVS1: ',sub_res_res_1$PVS1,sep = '')\n  sub_res_res_1$PS1 <- paste('PS1: ',sub_res_res_1$PS1,sep = '')\n  sub_res_res_1$PS2 <- paste('PS2: ',sub_res_res_1$PS2,sep = '')\n  sub_res_res_1$PS3 <- paste('PS3: ',sub_res_res_1$PS3,sep = '')\n  sub_res_res_1$PS4 <- paste('PS4: ',sub_res_res_1$PS4,sep = '')\n  sub_res_res_1$PM1 <- paste('PM1: ',sub_res_res_1$PM1,sep = '')\n  sub_res_res_1$PM2 <- paste('PM2: ',sub_res_res_1$PM2,sep = '')\n  sub_res_res_1$PM3 <- paste('PM3: ',sub_res_res_1$PM3,sep = '')\n  sub_res_res_1$PM4 <- paste('PM4: ',sub_res_res_1$PM4,sep = '')\n  sub_res_res_1$PM5 <- paste('PM5: ',sub_res_res_1$PM5,sep = '')\n  sub_res_res_1$PM6 <- paste('PM6: ',sub_res_res_1$PM6,sep = '')\n  sub_res_res_1$PP1 <- paste('PP1: ',sub_res_res_1$PP1,sep = '')\n  sub_res_res_1$PP2 <- paste('PP2: ',sub_res_res_1$PP2,sep = '')\n  sub_res_res_1$PP3 <- paste('PP3: ',sub_res_res_1$PP3,sep = '')\n  sub_res_res_1$PP4 <- paste('PP4: ',sub_res_res_1$PP4,sep = '')\n  sub_res_res_1$PP5 <- paste('PP5: ',sub_res_res_1$PP5,sep = '')\n  sub_res_res_1$BA1 <- paste('BA1: ',sub_res_res_1$BA1,sep = '')\n  sub_res_res_1$BS1 <- paste('BS1: ',sub_res_res_1$BS1,sep = '')\n  sub_res_res_1$BS2 <- paste('BS2: ',sub_res_res_1$BS2,sep = '')\n  sub_res_res_1$BS3 <- paste('BS3: ',sub_res_res_1$BS3,sep = '')\n  sub_res_res_1$BS4 <- paste('BS4: ',sub_res_res_1$BS4,sep = '')\n  sub_res_res_1$BP1 <- paste('BP1: ',sub_res_res_1$BP1,sep = '')\n  sub_res_res_1$BP2 <- paste('BP2: ',sub_res_res_1$BP2,sep = '')\n  sub_res_res_1$BP3 <- paste('BP3: ',sub_res_res_1$BP3,sep = '')\n  sub_res_res_1$BP4 <- paste('BP4: ',sub_res_res_1$BP4,sep = '')\n  sub_res_res_1$BP5 <- paste('BP5: ',sub_res_res_1$BP5,sep = '')\n  sub_res_res_1$BP6 <- paste('BP6: ',sub_res_res_1$BP6,sep = '')\n  sub_res_res_1$BP7 <- paste('BP7: ',sub_res_res_1$BP7,sep = '')}\n{sub_res_res_1$InterVar_detail <- paste(sub_res_res_1$PVS1,';',sub_res_res_1$PS1,';',sub_res_res_1$PS2,';',sub_res_res_1$PS3,';'\n                                        ,sub_res_res_1$PS4,';',sub_res_res_1$PM1,';',sub_res_res_1$PM2,';',sub_res_res_1$PM3,';'\n                                        ,sub_res_res_1$PM4,\n                                        ';',sub_res_res_1$PM5,';',sub_res_res_1$PM6,';',sub_res_res_1$PP1,';',sub_res_res_1$PP2,';'\n                                        ,sub_res_res_1$PP3,\n                                        ';',sub_res_res_1$PP4,';',sub_res_res_1$PP5,';',sub_res_res_1$BA1,';',sub_res_res_1$BS1,';',\n                                        sub_res_res_1$BS2,';',sub_res_res_1$BS3,';',sub_res_res_1$BS4,';',sub_res_res_1$BP1,';',\n                                        sub_res_res_1$BP2,';',sub_res_res_1$BP3,';',sub_res_res_1$BP4,';',sub_res_res_1$BP5,';',\n                                        sub_res_res_1$BP6,';',sub_res_res_1$BP7,sep = ' ')}\nsub_res_res_1$Variation_detail <- paste(sub_res_res_1$Ref.x,'>',sub_res_res_1$Alt.x,sep='')\ncolnames(sub_res_res_1)\n\n#select result col\ndefault_arguments <- unlist(str_split(default_select_name,' '))\n#custom_arguments <- unlist(str_split(custom_select_name,' '))\n\nfinal_res <- sub_res_res_1 %>% select(default_arguments)\ncolnames(final_res)[c(1,6,7,8,9)] <-c('Gene_name','Variation_region','Variation_function','AAChange','dbSNP') \ncol_nm <- colnames(final_res)\nfor (i in col_nm){\n    final_res[[i]][which(final_res[[i]]=='.')] = NA\n}\nwrite.csv(final_res,'Final_variation_result.csv',row.names = F)\n\n",
                                "writable": false
                            }
                        ]
                    }
                ]
            },
            "label": "merge_exomiser_annovar_res",
            "sbg:x": 2617.43603515625,
            "sbg:y": 338.5209655761719
        }
    ],
    "requirements": [
        {
            "class": "SubworkflowFeatureRequirement"
        }
    ]
}