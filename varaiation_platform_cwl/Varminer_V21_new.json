{
    "class": "Workflow",
    "cwlVersion": "v1.0",
    "id": "_varminer",
    "label": "V20Varminer",
    "$namespaces": {
        "sbg": "https://www.sevenbridges.com/"
    },
    "inputs": [
        {
            "id": "annoPath",
            "type": "Directory?",
            "default": {
                "class": "Directory",
                "path": "/mnt/datashare/reference_genome/geneAnno"
            },
            "sbg:x": 1026.8795166015625,
            "sbg:y": 747.0625
        },
        {
            "id": "inputType",
            "type": "string?",
            "default": "file",
            "sbg:exposed": true
        },
        {
            "id": "annoCol",
            "type": "string?",
            "default": "Gene.refGene",
            "sbg:exposed": true
        },
        {
            "id": "output_2",
            "type": "string?",
            "default": "annotated.txt",
            "sbg:exposed": true
        },
        {
            "id": "annoFileList",
            "type": "string[]?",
            "default": [
                "annotation",
                "OMIM",
                "GO",
                "DO",
                "HPO",
                "KEGG",
                "WIKI",
                "REACTOME",
                "BIOCARTA",
                "HALLMARK",
                "PID"
            ],
            "sbg:exposed": true
        },
        {
            "id": "geneAlias",
            "type": "string?",
            "default": "yes",
            "sbg:exposed": true
        },
        {
            "id": "ref_version",
            "type": "string?",
            "sbg:x": -3.187224864959717,
            "sbg:y": 533
        },
        {
            "id": "splicing_threshold",
            "type": "int?",
            "sbg:x": -6.374449729919434,
            "sbg:y": 356.42510986328125
        },
        {
            "id": "output",
            "type": "string?",
            "sbg:x": 0,
            "sbg:y": 845.803955078125
        },
        {
            "id": "yml",
            "type": "File?",
            "default": {
                "class": "File",
                "path": "/mnt/datashare/home/wangzesong/test_exomiser.yml"
            },
            "sbg:x": 0,
            "sbg:y": -95.61674499511719
        },
        {
            "id": "version",
            "type": "string?",
            "default": "2109",
            "sbg:x": -3.187224864959717,
            "sbg:y": 198.4295196533203
        },
        {
            "id": "hpoIds",
            "type": "string[]?",
            "sbg:x": 0,
            "sbg:y": 1067.2265625
        },
        {
            "id": "dirdata",
            "type": "Directory?",
            "default": {
                "class": "Directory",
                "path": "/mnt/datashare/reference_genome/Exomiser/exomiser-data"
            },
            "sbg:x": 0,
            "sbg:y": 1280.6796875
        },
        {
            "id": "outpref",
            "type": "string?",
            "default": "exomiser_result",
            "sbg:exposed": true
        },
        {
            "id": "maxFreq",
            "type": "float?",
            "default": 10,
            "sbg:exposed": true
        },
        {
            "id": "annovar_db",
            "type": "Directory?",
            "default": {
                "class": "Directory",
                "path": "/mnt/datashare/annovar_db/humandb"
            },
            "sbg:x": 0,
            "sbg:y": 1387.3984375
        },
        {
            "id": "protocol",
            "type": "string?",
            "default": "refGene,ensGene,avsnp150,popfreq_all_20150413,gnomad211_exome,clinvar_exmpt,predsoft_v1,rmsk,tfbsConsSites,intervar_20180118,spliceAI_2021_02_03",
            "sbg:exposed": true
        },
        {
            "id": "operation",
            "type": "string?",
            "default": "g,g,f,f,f,f,f,r,r,f,f",
            "sbg:exposed": true
        },
        {
            "id": "raw_vcf",
            "type": "File?",
            "sbg:x": 6.374449729919434,
            "sbg:y": 655.9360961914062
        },
        {
            "id": "function_filter_arg",
            "type": "string[]?",
            "sbg:x": 713,
            "sbg:y": 1263.26318359375
        },
        {
            "id": "maf_cutoff",
            "type": "float?",
            "sbg:x": 592.6052856445312,
            "sbg:y": 1085.4736328125
        },
        {
            "id": "maf_database",
            "type": "string[]?",
            "sbg:x": 621.3421020507812,
            "sbg:y": 959.5
        },
        {
            "id": "region_filter_arg",
            "type": "string[]?",
            "sbg:x": 646.0789184570312,
            "sbg:y": 785.26318359375
        }
    ],
    "outputs": [
        {
            "id": "extracted_result",
            "outputSource": [
                "exomiser_res_get/extracted_result"
            ],
            "type": "File?",
            "sbg:x": 1422.121337890625,
            "sbg:y": -155.45594787597656
        },
        {
            "id": "output_1",
            "outputSource": [
                "api_filter_annovar_res_r/output"
            ],
            "type": "File?",
            "sbg:x": 1901.273681640625,
            "sbg:y": 538.4537353515625
        },
        {
            "id": "output_3",
            "outputSource": [
                "geneanno/output_1"
            ],
            "type": "File?",
            "sbg:x": 1512.7294921875,
            "sbg:y": 605.34375
        }
    ],
    "steps": [
        {
            "id": "geneanno",
            "in": [
                {
                    "id": "inputType",
                    "source": "inputType"
                },
                {
                    "id": "inputFile",
                    "source": "new_annovar_function_1/output_txt"
                },
                {
                    "id": "annoCol",
                    "source": "annoCol"
                },
                {
                    "id": "annoPath",
                    "source": "annoPath"
                },
                {
                    "id": "output",
                    "source": "output_2"
                },
                {
                    "id": "annoFileList",
                    "source": [
                        "annoFileList"
                    ]
                },
                {
                    "id": "geneAlias",
                    "source": "geneAlias"
                }
            ],
            "out": [
                {
                    "id": "output_1"
                }
            ],
            "run": {
                "class": "CommandLineTool",
                "cwlVersion": "v1.0",
                "$namespaces": {
                    "sbg": "https://www.sevenbridges.com/"
                },
                "id": "geneanno",
                "baseCommand": [
                    "python",
                    "geneAnno.py",
                    "wqrwr4"
                ],
                "inputs": [
                    {
                        "id": "inputType",
                        "type": "string?",
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--inputType"
                        }
                    },
                    {
                        "id": "gene",
                        "type": "string?",
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--gene"
                        }
                    },
                    {
                        "id": "inputFile",
                        "type": "File?",
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--inputFile"
                        }
                    },
                    {
                        "id": "annoCol",
                        "type": "string?",
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--annoCol"
                        }
                    },
                    {
                        "id": "geneMulti",
                        "type": "string?",
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--geneMulti"
                        }
                    },
                    {
                        "id": "annoPath",
                        "type": "Directory?",
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--annoPath"
                        }
                    },
                    {
                        "id": "genesep",
                        "type": "string?",
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--genesep"
                        }
                    },
                    {
                        "default": "out.txt",
                        "id": "output",
                        "type": "string?",
                        "inputBinding": {
                            "position": 100,
                            "prefix": "--output"
                        }
                    },
                    {
                        "id": "annoFileList",
                        "type": "string[]?",
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--annoFileList",
                            "itemSeparator": ","
                        }
                    },
                    {
                        "id": "geneAlias",
                        "type": "string?",
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--geneAlias"
                        }
                    }
                ],
                "outputs": [
                    {
                        "id": "output_1",
                        "type": "File?",
                        "outputBinding": {
                            "glob": "$(inputs.output)"
                        }
                    }
                ],
                "label": "geneAnno",
                "requirements": [
                    {
                        "class": "DockerRequirement",
                        "dockerPull": "harbor.bio-it.cn:5000/library/py38_r403:anno"
                    },
                    {
                        "class": "InitialWorkDirRequirement",
                        "listing": [
                            {
                                "entryname": "geneAnno.py",
                                "entry": "import warnings\r\nwarnings.filterwarnings(\"ignore\")\r\nimport pandas as pd\r\nimport numpy as np\r\nimport sys\r\nimport os\r\n\r\nfrom optparse import OptionParser\r\n\r\nparser = OptionParser()\r\nparser.add_option('--inputType', dest=\"inputType\", default = \"list\", help=\"list or file\")\r\nparser.add_option('--gene', dest=\"gene\", default = \"\", help=\"if inputType list, gene list\")\r\nparser.add_option('--inputFile', dest=\"inputFile\", default = \"\", help=\"if inputType file, gene file\")\r\nparser.add_option('--annoCol', dest=\"annoCol\", default = \"\", help=\"if inputType file, gene col\")\r\nparser.add_option('--geneMulti', dest=\"geneMulti\", default = \" \", help=\"if inputType file, gene multi, yes or no\")\r\nparser.add_option('--genesep', dest=\"genesep\", default = \" \", help=\"if inputType file, if geneMulti yes, gene sep\")\r\nparser.add_option('--annoPath', dest=\"annoPath\", default = \" \", help=\"annoPath\")\r\nparser.add_option('--output', dest=\"output\", default = \" \", help=\"output\")\r\nparser.add_option('--annoFileList', dest=\"annoFileList\", default = \" \", help=\"annoFileList, comma join\")\r\nparser.add_option('--geneAlias', default = \" \", dest=\"geneAlias\", help=\"geneAlias, yes or no\")\r\n(options, args) = parser.parse_args()\r\nfor i in \"inputType,gene,inputFile,annoCol,geneMulti,genesep,annoPath,output,annoFileList,geneAlias\".split(\",\"):\r\n    exec(i+\"=options.\"+i)\r\n\r\n\r\n\r\ndef read_data(inputFile,write = False,writeData = None):\r\n    fileType = inputFile.split(\".\")[-1]\r\n    if fileType == \"xlsx\":\r\n        if write:\r\n            writeData.to_excel(inputFile)\r\n        else:\r\n            transData = pd.read_excel(inputFile,dtype=\"str\")\r\n    else:\r\n        if fileType in [\"txt\",\"tsv\"]:\r\n            sep = \"\\t\"\r\n        else:\r\n            sep=\",\"\r\n        if write:\r\n            writeData.to_csv(inputFile,sep=sep,index = False)\r\n        else:\r\n            transData = pd.read_csv(inputFile,dtype=\"str\",sep=sep)\r\n    if not write:\r\n        return transData\r\n\r\ndef trans_int(x):\r\n    if not pd.isnull(x):\r\n        x = int(x)\r\n    return x\r\ndef trans_str(x):\r\n    if not pd.isnull(x):\r\n        x = str(int(x))\r\n    return x\r\n    \r\nif inputType == \"list\":\r\n    annoCol = \"search\"\r\n    gene = gene.replace(\",\",\"\\n\").replace(\"\\n\",\"\\t\").replace(\" \",\"\\t\").split(\"\\t\")\r\n    transData = pd.DataFrame(gene,columns=[annoCol])\r\n    transData = transData[transData[annoCol] != \"\"]\r\n    transData.index = range(len(transData))\r\nelif inputType == \"file\":\r\n    transData = read_data(inputFile)\r\ngeneTrans = pd.read_csv(os.path.join(annoPath,\"geneTrans.csv.gz\"),dtype=\"str\")\r\nif geneAlias == \"no\":\r\n    geneTrans = geneTrans[geneTrans[\"type\"] != \"synonyms\"]\r\ntransDataGene = transData[[annoCol]]\r\ntransDataGene.columns = [\"up\"]\r\ntransDataGene[\"up\"] = transDataGene[\"up\"].str.upper()\r\nif geneMulti == \"yes\":\r\n    transDataGene[\"order\"] = transDataGene.index\r\n    transDataGene = transDataGene.drop(\"up\", axis=1).join(transDataGene[\"up\"].str.split(genesep, expand=True).stack().reset_index(level=1, drop=True).rename(\"up\"))\r\ntransDataGene = pd.merge(transDataGene,geneTrans[[\"up\",\"id\"]],on=\"up\",how=\"left\")\r\nif geneMulti == \"yes\":\r\n    transDataGene[\"id\"] = transDataGene[\"id\"].apply(trans_int)\r\n    transDataGene = transDataGene.sort_values(by=\"id\").drop_duplicates(subset= [\"order\"]).sort_values(by=\"order\")\r\n    transDataGene[\"id\"] = transDataGene[\"id\"].apply(trans_str)\r\ntransDataGene = transDataGene[[\"id\"]]    \r\nannoFileList = annoFileList.split(\",\")\r\nfor annoFile in annoFileList:\r\n    anno = pd.read_csv(os.path.join(annoPath,\"DB\"+annoFile+\".csv.gz\"),dtype=\"str\")\r\n    for i in anno.columns:\r\n        if i != \"id\":\r\n            print({i:annoFile+\"_\"+i})\r\n            anno.rename(columns={i:annoFile+\"_\"+i},inplace=True)\r\n    transDataGene = pd.merge(transDataGene,anno,on=\"id\",how=\"left\")\r\ntransData = pd.concat([transData,transDataGene.drop(\"id\",axis =1)],axis=1)\r\ntransData.fillna(\".\",inplace=True)\r\n\r\nread_data(output,write = True,writeData = transData)\r\n# import time \r\n# time.sleep(100)",
                                "writable": false
                            }
                        ]
                    },
                    {
                        "class": "InlineJavascriptRequirement"
                    }
                ]
            },
            "label": "geneAnno",
            "sbg:x": 1256.9210205078125,
            "sbg:y": 731.5263061523438
        },
        {
            "id": "analysis_single_exomiser_wf_v1",
            "in": [
                {
                    "id": "vcf",
                    "source": "bgzip/gz_vcf"
                },
                {
                    "id": "version",
                    "source": "version"
                },
                {
                    "id": "outpref",
                    "source": "outpref"
                },
                {
                    "id": "maxFreq",
                    "source": "maxFreq"
                },
                {
                    "id": "hpoIds",
                    "source": [
                        "hpoIds"
                    ]
                },
                {
                    "id": "genomeAssembly",
                    "source": "ref_version"
                },
                {
                    "id": "dirdata",
                    "source": "dirdata"
                },
                {
                    "id": "yml",
                    "source": "yml"
                }
            ],
            "out": [
                {
                    "id": "xrVCF"
                },
                {
                    "id": "xrgenevar"
                },
                {
                    "id": "xdVCF"
                },
                {
                    "id": "xdgenevar"
                },
                {
                    "id": "mtVCF"
                },
                {
                    "id": "mtgenevar"
                },
                {
                    "id": "json"
                },
                {
                    "id": "html"
                },
                {
                    "id": "arVCF"
                },
                {
                    "id": "argenevar"
                },
                {
                    "id": "adVCF"
                },
                {
                    "id": "adgene"
                },
                {
                    "id": "adgenec"
                }
            ],
            "run": {
                "class": "Workflow",
                "cwlVersion": "v1.0",
                "id": "analysis_single_exomiser_wf_v1",
                "label": "analysis_single_exomiser.wf_v1",
                "$namespaces": {
                    "sbg": "https://www.sevenbridges.com/"
                },
                "inputs": [
                    {
                        "id": "vcf",
                        "type": "File?",
                        "secondaryFiles": [
                            ".tbi"
                        ],
                        "sbg:x": -702.5,
                        "sbg:y": -191.5
                    },
                    {
                        "id": "version",
                        "type": "string?",
                        "sbg:x": -624.5,
                        "sbg:y": -399.5
                    },
                    {
                        "id": "outpref",
                        "type": "string?",
                        "sbg:x": -719.5,
                        "sbg:y": -80
                    },
                    {
                        "id": "maxFreq",
                        "type": "float?",
                        "sbg:x": -787,
                        "sbg:y": 69
                    },
                    {
                        "id": "hpoIds",
                        "type": "string[]?",
                        "sbg:x": -835.5,
                        "sbg:y": 228.5
                    },
                    {
                        "id": "genomeAssembly",
                        "type": "string?",
                        "sbg:x": -774.5,
                        "sbg:y": 364.5
                    },
                    {
                        "id": "dirdata",
                        "type": "Directory?",
                        "sbg:x": -512.5,
                        "sbg:y": 400
                    },
                    {
                        "id": "yml",
                        "type": "File?",
                        "sbg:x": -257.361328125,
                        "sbg:y": -921.254638671875
                    }
                ],
                "outputs": [
                    {
                        "id": "xrVCF",
                        "outputSource": [
                            "singleexomiser/xrVCF"
                        ],
                        "type": "File?",
                        "sbg:x": 135.8336639404297,
                        "sbg:y": -434.8744812011719
                    },
                    {
                        "id": "xrgenevar",
                        "outputSource": [
                            "singleexomiser/xrgenevar"
                        ],
                        "type": "File[]?",
                        "sbg:x": 289.71429443359375,
                        "sbg:y": -286.8571472167969
                    },
                    {
                        "id": "xdVCF",
                        "outputSource": [
                            "singleexomiser/xdVCF"
                        ],
                        "type": "File?",
                        "sbg:x": 474.28570556640625,
                        "sbg:y": -233.57142639160156
                    },
                    {
                        "id": "xdgenevar",
                        "outputSource": [
                            "singleexomiser/xdgenevar"
                        ],
                        "type": "File[]?",
                        "sbg:x": 557.1428833007812,
                        "sbg:y": -158.7142791748047
                    },
                    {
                        "id": "mtVCF",
                        "outputSource": [
                            "singleexomiser/mtVCF"
                        ],
                        "type": "File?",
                        "sbg:x": 610.4285888671875,
                        "sbg:y": -43.14285659790039
                    },
                    {
                        "id": "mtgenevar",
                        "outputSource": [
                            "singleexomiser/mtgenevar"
                        ],
                        "type": "File[]?",
                        "sbg:x": 682.2857055664062,
                        "sbg:y": 6.285714149475098
                    },
                    {
                        "id": "json",
                        "outputSource": [
                            "singleexomiser/json"
                        ],
                        "type": "File?",
                        "sbg:x": 1001.8373413085938,
                        "sbg:y": 104.14286041259766
                    },
                    {
                        "id": "html",
                        "outputSource": [
                            "singleexomiser/html"
                        ],
                        "type": "File?",
                        "sbg:x": 667.4285888671875,
                        "sbg:y": 167.7142791748047
                    },
                    {
                        "id": "arVCF",
                        "outputSource": [
                            "singleexomiser/arVCF"
                        ],
                        "type": "File?",
                        "sbg:x": 582.9782104492188,
                        "sbg:y": 266.7021789550781
                    },
                    {
                        "id": "argenevar",
                        "outputSource": [
                            "singleexomiser/argenevar"
                        ],
                        "type": "File[]?",
                        "sbg:x": 681.264404296875,
                        "sbg:y": 401.51153564453125
                    },
                    {
                        "id": "adVCF",
                        "outputSource": [
                            "singleexomiser/adVCF"
                        ],
                        "type": "File?",
                        "sbg:x": 672,
                        "sbg:y": 548.2857055664062
                    },
                    {
                        "id": "adgene",
                        "outputSource": [
                            "singleexomiser/adgene"
                        ],
                        "type": "File?",
                        "sbg:x": 251.45201110839844,
                        "sbg:y": 708.077392578125
                    },
                    {
                        "id": "adgenec",
                        "outputSource": [
                            "singleexomiser/adgenec"
                        ],
                        "type": "File?",
                        "sbg:x": 287.28875732421875,
                        "sbg:y": 450.92303466796875
                    }
                ],
                "steps": [
                    {
                        "id": "prepareexmiser_input",
                        "in": [
                            {
                                "id": "dirdata",
                                "source": "dirdata"
                            },
                            {
                                "id": "yml",
                                "source": "yml"
                            },
                            {
                                "id": "hpoIds",
                                "source": [
                                    "hpoIds"
                                ]
                            },
                            {
                                "id": "genomeAssembly",
                                "source": "genomeAssembly"
                            },
                            {
                                "id": "outpref",
                                "source": "outpref"
                            },
                            {
                                "id": "vcf",
                                "source": "vcf"
                            },
                            {
                                "id": "maxFreq",
                                "source": "maxFreq"
                            },
                            {
                                "id": "version",
                                "source": "version"
                            }
                        ],
                        "out": [
                            {
                                "id": "yamloutput"
                            }
                        ],
                        "run": {
                            "class": "CommandLineTool",
                            "cwlVersion": "v1.0",
                            "$namespaces": {
                                "sbg": "https://www.sevenbridges.com/"
                            },
                            "id": "prepareexmiser_input",
                            "baseCommand": [
                                "python",
                                "exomiserInput.py"
                            ],
                            "inputs": [
                                {
                                    "id": "dirdata",
                                    "type": "Directory?",
                                    "inputBinding": {
                                        "position": 1,
                                        "prefix": "--dirdata"
                                    }
                                },
                                {
                                    "id": "yml",
                                    "type": "File?",
                                    "inputBinding": {
                                        "position": 3,
                                        "prefix": "--yml"
                                    }
                                },
                                {
                                    "id": "hpoIds",
                                    "type": "string[]?",
                                    "inputBinding": {
                                        "position": 4,
                                        "prefix": "--hpoIds",
                                        "itemSeparator": ","
                                    }
                                },
                                {
                                    "id": "genomeAssembly",
                                    "type": "string?",
                                    "inputBinding": {
                                        "position": 5,
                                        "prefix": "--genomeAssembly"
                                    }
                                },
                                {
                                    "id": "outpref",
                                    "type": "string?",
                                    "inputBinding": {
                                        "position": 6,
                                        "prefix": "--outpref"
                                    }
                                },
                                {
                                    "id": "vcf",
                                    "type": "File?",
                                    "inputBinding": {
                                        "position": 7,
                                        "prefix": "--vcf"
                                    }
                                },
                                {
                                    "id": "maxFreq",
                                    "type": "float?",
                                    "inputBinding": {
                                        "position": 8,
                                        "prefix": "--maxFreq"
                                    }
                                },
                                {
                                    "id": "version",
                                    "type": "string?",
                                    "inputBinding": {
                                        "position": 9,
                                        "prefix": "--version"
                                    }
                                },
                                {
                                    "default": "test_analysis_exome.yml",
                                    "id": "outyaml",
                                    "type": "string?",
                                    "inputBinding": {
                                        "position": 10,
                                        "prefix": "--outyaml"
                                    }
                                }
                            ],
                            "outputs": [
                                {
                                    "id": "yamloutput",
                                    "type": "File?",
                                    "outputBinding": {
                                        "glob": "$(inputs.outyaml)"
                                    }
                                }
                            ],
                            "label": "prepareExmiser_input",
                            "requirements": [
                                {
                                    "class": "DockerRequirement",
                                    "dockerPull": "harbor.bio-it.cn:5000/library/r_packages:v2"
                                },
                                {
                                    "class": "InitialWorkDirRequirement",
                                    "listing": [
                                        {
                                            "entryname": "exomiserInput.py",
                                            "entry": "#!coding=utf-8\nimport pandas as pd\nimport json\nimport numpy as np\nimport os\nfrom optparse import OptionParser\nimport re\nimport yaml\n\n###param\nparser = OptionParser()\nparser.add_option(\"--dirdata\", dest=\"dirdata\", default=\"/mnt/datashare/reference_genome/Exomiser/exomiser-data\",help=\"exomiser.data-directory\")\nparser.add_option(\"--yml\",dest=\"yml\", default=\"/mnt/datashare/reference_genome/Exomiser/exomiser-config/test-analysis-exome.yml\", help=\"test-analysis-exome.yml\")\nparser.add_option(\"--hpoIds\", dest=\"hpoIds\",  help=\"input hpoids,comma split\")\nparser.add_option(\"--genomeAssembly\", dest=\"genomeAssembly\",  help=\"hg19 or hg38\")\nparser.add_option(\"--outpref\", dest=\"outpref\",  help=\"outputPrefix\")\nparser.add_option(\"--vcf\", dest=\"vcf\",  help=\"vcf input, tbi requre\")\nparser.add_option(\"--maxFreq\", dest=\"maxFreq\",  default= 1 , help=\"maxFreq\")\nparser.add_option(\"--analysisMode\", dest=\"analysisMode\",  default= \"PASS_ONLY\" , help=\"PASS_ONLY \")\nparser.add_option(\"--version\", dest=\"version\",  default= \"2109\" , help=\"data-version\")\nparser.add_option(\"--outyaml\", dest=\"outyaml\",   help=\"file name of output yaml\")\n\n#outapp = \"application.properties\"\n\n(options, args) = parser.parse_args()\nfor i in options.__dict__:\n    exec(i+ \" = options.\"+i)\n    \nprint(vcf)\n##yml读取\nymlf = open(yml,'r',encoding='utf-8')\nymlR = ymlf.read()\nymlInfo = yaml.load(ymlR,Loader=yaml.FullLoader)\n\n##对变量值进行替换\n###analysis参数值\nymlInfo[\"analysis\"][\"genomeAssembly\"] = genomeAssembly\nymlInfo[\"analysis\"][\"vcf\"] = vcf\nymlInfo[\"analysis\"][\"hpoIds\"]  = list(map(lambda x:x.strip(),hpoIds.split(\",\")))\nymlInfo[\"analysis\"][\"analysisMode\"]  = analysisMode\n\nfor i in ymlInfo[\"analysis\"][\"steps\"]:\n    if \"frequencyFilter\" in i.keys():\n        i[\"frequencyFilter\"][\"maxFrequency\"] = maxFreq\n        \n####outputOptions参数值\nymlInfo[\"outputOptions\"][\"outputPrefix\"] = outpref\n\n##yaml格式输出\naa = json.dumps(ymlInfo)\nbb = yaml.load(aa,Loader=yaml.FullLoader)\nfile1 = open(outyaml,\"w\")\nyaml.safe_dump(bb,file1,default_flow_style=False)\nymlf.close()\n\n##生成application.properties\n# outApp = open(outapp,'w',encoding='utf-8')\n# outApp.write(\"exomiser.data-directory=\" + dirdata + \"\\n\")\n# outApp.write(\"remm.version=0.3.1.post1\" + \"\\n\")\n# outApp.write(\"cadd.version=1.4\" + \"\\n\")\n# outApp.write(\"exomiser.\"+ genomeAssembly +\".data-version=\" + str(version)+ \"\\n\")\n# outApp.write(\"exomiser.\"+ genomeAssembly +\".variant-white-list-path=\"+ str(version) + \"_\"+ genomeAssembly + \"_clinvar_whitelist.tsv.gz\" + \"\\n\")\n# outApp.write(\"exomiser.phenotype.data-version=\" + str(version)+ \"\\n\")\n# outApp.close()\n\n",
                                            "writable": false
                                        }
                                    ]
                                },
                                {
                                    "class": "InlineJavascriptRequirement"
                                }
                            ]
                        },
                        "label": "prepareExmiser_input",
                        "sbg:x": -306,
                        "sbg:y": -25
                    },
                    {
                        "id": "singleexomiser",
                        "in": [
                            {
                                "id": "analysis",
                                "source": "prepareexmiser_input/yamloutput"
                            },
                            {
                                "id": "vcf",
                                "source": "vcf"
                            },
                            {
                                "id": "assembly",
                                "source": "genomeAssembly"
                            },
                            {
                                "id": "data",
                                "source": "dirdata"
                            },
                            {
                                "id": "version",
                                "source": "version"
                            },
                            {
                                "id": "outpref",
                                "source": "outpref"
                            }
                        ],
                        "out": [
                            {
                                "id": "html"
                            },
                            {
                                "id": "json"
                            },
                            {
                                "id": "adVCF"
                            },
                            {
                                "id": "adgene"
                            },
                            {
                                "id": "arVCF"
                            },
                            {
                                "id": "argenevar"
                            },
                            {
                                "id": "xdVCF"
                            },
                            {
                                "id": "xdgenevar"
                            },
                            {
                                "id": "xrVCF"
                            },
                            {
                                "id": "xrgenevar"
                            },
                            {
                                "id": "mtVCF"
                            },
                            {
                                "id": "mtgenevar"
                            },
                            {
                                "id": "adgenec"
                            }
                        ],
                        "run": {
                            "class": "CommandLineTool",
                            "cwlVersion": "v1.0",
                            "$namespaces": {
                                "sbg": "https://www.sevenbridges.com/"
                            },
                            "id": "singleexomiser",
                            "baseCommand": [],
                            "inputs": [
                                {
                                    "id": "analysis",
                                    "type": "File?",
                                    "inputBinding": {
                                        "position": 1,
                                        "prefix": "--analysis"
                                    }
                                },
                                {
                                    "id": "vcf",
                                    "type": "File?",
                                    "inputBinding": {
                                        "position": 2,
                                        "prefix": "--vcf"
                                    },
                                    "secondaryFiles": [
                                        ".tbi"
                                    ]
                                },
                                {
                                    "id": "assembly",
                                    "type": "string?",
                                    "inputBinding": {
                                        "position": 3,
                                        "prefix": "--assembly"
                                    }
                                },
                                {
                                    "id": "data",
                                    "type": "Directory?",
                                    "inputBinding": {
                                        "position": 4,
                                        "prefix": "--exomiser.data-directory=",
                                        "separate": false
                                    }
                                },
                                {
                                    "id": "version",
                                    "type": "string?",
                                    "inputBinding": {
                                        "position": 7
                                    }
                                },
                                {
                                    "id": "outpref",
                                    "type": "string?"
                                }
                            ],
                            "outputs": [
                                {
                                    "id": "html",
                                    "type": "File?",
                                    "outputBinding": {
                                        "glob": "$(inputs.outpref)*.html"
                                    }
                                },
                                {
                                    "id": "json",
                                    "type": "File?",
                                    "outputBinding": {
                                        "glob": "$(inputs.outpref)*.json"
                                    }
                                },
                                {
                                    "id": "adVCF",
                                    "type": "File?",
                                    "outputBinding": {
                                        "glob": "$(inputs.outpref)*AD.vcf"
                                    }
                                },
                                {
                                    "id": "adgene",
                                    "type": "File?",
                                    "outputBinding": {
                                        "glob": "$(inputs.outpref)*AD.variants.tsv"
                                    }
                                },
                                {
                                    "id": "arVCF",
                                    "type": "File?",
                                    "outputBinding": {
                                        "glob": "$(inputs.outpref)*AR.vcf"
                                    }
                                },
                                {
                                    "id": "argenevar",
                                    "type": "File[]?",
                                    "outputBinding": {
                                        "glob": "$(inputs.outpref)*AR.*.tsv"
                                    }
                                },
                                {
                                    "id": "xdVCF",
                                    "type": "File?",
                                    "outputBinding": {
                                        "glob": "$(inputs.outpref)*XD.vcf"
                                    }
                                },
                                {
                                    "id": "xdgenevar",
                                    "type": "File[]?",
                                    "outputBinding": {
                                        "glob": "$(inputs.outpref)*XD.*.tsv"
                                    }
                                },
                                {
                                    "id": "xrVCF",
                                    "type": "File?",
                                    "outputBinding": {
                                        "glob": "$(inputs.outpref)*XR.vcf"
                                    }
                                },
                                {
                                    "id": "xrgenevar",
                                    "type": "File[]?",
                                    "outputBinding": {
                                        "glob": "$(inputs.outpref)*XR.*.tsv"
                                    }
                                },
                                {
                                    "id": "mtVCF",
                                    "type": "File?",
                                    "outputBinding": {
                                        "glob": "$(inputs.outpref)*MT.vcf"
                                    }
                                },
                                {
                                    "id": "mtgenevar",
                                    "type": "File[]?",
                                    "outputBinding": {
                                        "glob": "$(inputs.outpref)*MT.*.tsv"
                                    }
                                },
                                {
                                    "id": "adgenec",
                                    "type": "File?",
                                    "outputBinding": {
                                        "glob": "$(inputs.outpref)*AD.genes.tsv"
                                    }
                                }
                            ],
                            "label": "singleExomiser",
                            "arguments": [
                                {
                                    "position": 8,
                                    "prefix": "--exomiser.phenotype.data-version=",
                                    "separate": false,
                                    "valueFrom": "$(inputs.version)"
                                },
                                {
                                    "position": 10,
                                    "prefix": "--exomiser.",
                                    "separate": false,
                                    "valueFrom": "$(inputs.assembly).data-version=$(inputs.version)"
                                }
                            ],
                            "requirements": [
                                {
                                    "class": "DockerRequirement",
                                    "dockerPull": "harbor.bio-it.cn:5000/library/exomiser-cli:20220618"
                                },
                                {
                                    "class": "InitialWorkDirRequirement",
                                    "listing": [
                                        "$(inputs.vcf)"
                                    ]
                                },
                                {
                                    "class": "InlineJavascriptRequirement"
                                }
                            ]
                        },
                        "label": "singleExomiser",
                        "sbg:x": 49.598899841308594,
                        "sbg:y": 13.499991416931152
                    }
                ],
                "requirements": []
            },
            "label": "analysis_single_exomiser.wf_v1",
            "sbg:x": 956.1170654296875,
            "sbg:y": 29.41737174987793
        },
        {
            "id": "exomiser_res_get",
            "in": [
                {
                    "id": "exomiser_json_res",
                    "source": "analysis_single_exomiser_wf_v1/json"
                },
                {
                    "id": "exomiser_tsv_res",
                    "source": "analysis_single_exomiser_wf_v1/adgene"
                },
                {
                    "id": "exomiser_extract_result_name",
                    "default": "exomiser_merged_result.csv"
                }
            ],
            "out": [
                {
                    "id": "extracted_result"
                }
            ],
            "run": {
                "class": "CommandLineTool",
                "cwlVersion": "v1.0",
                "$namespaces": {
                    "sbg": "https://www.sevenbridges.com/"
                },
                "id": "exomiser_res_get",
                "baseCommand": [
                    "python",
                    "extract.py"
                ],
                "inputs": [
                    {
                        "id": "exomiser_json_res",
                        "type": "File?",
                        "inputBinding": {
                            "position": 0
                        }
                    },
                    {
                        "id": "exomiser_tsv_res",
                        "type": "File?",
                        "inputBinding": {
                            "position": 1
                        }
                    },
                    {
                        "id": "exomiser_extract_result_name",
                        "type": "string?",
                        "inputBinding": {
                            "position": 2
                        }
                    }
                ],
                "outputs": [
                    {
                        "id": "extracted_result",
                        "type": "File?",
                        "outputBinding": {
                            "glob": "*.csv"
                        }
                    }
                ],
                "label": "exomiser_res_get",
                "requirements": [
                    {
                        "class": "DockerRequirement",
                        "dockerPull": "harbor.bio-it.cn:5000/library/r_packages:v2"
                    },
                    {
                        "class": "InitialWorkDirRequirement",
                        "listing": [
                            {
                                "entryname": "extract.py",
                                "entry": "import json\nimport pandas as pd\nimport os\nimport numpy as np\nimport sys\n\n##定义inheritance dict\nInheritanceDict = {\"AUTOSOMAL_DOMINANT\":\"AD\",\"AUTOSOMAL_RECESSIVE\":\"AR\",\"X_DOMINANT\":\"XD\",\"X_RECESSIVE\":\"XR\",\"MITOCHONDRIAL\":\"MT\",\"UNKNOWN\":\"un\"}\n\n\n#fileJson = \"Pfeiffer-hiphive-exome-PASS_ONLY.json\"\n#fileTsv = \"Pfeiffer-hiphive-exome-PASS_ONLY_AD.variants.tsv\"\n\nfileJson = sys.argv[1]   ##json文件\nfileTsv = sys.argv[2]    ##任意一 *.variants.tsv 文件\noutput = sys.argv[3]     ##输出文件名\n\n##读取json文件提取基因、遗传模式、相关疾病，打分；\nwith open(fileJson, \"r\") as f:\n    data = json.load(f)\n    \ngeneData = pd.DataFrame(data)[[\"geneSymbol\",\"combinedScore\",\"compatibleInheritanceModes\",\"associatedDiseases\"]]\n\ndef inherit(x):\n    if len(x) > 0:\n        tmp = []\n        for i in x:\n            tmp.append(InheritanceDict[i])\n        return \";\".join(tmp)\n    else:\n        return np.nan\n\ngeneData[\"InheritanceModes\"] = geneData[\"compatibleInheritanceModes\"].apply(lambda x:inherit(x))\n\ndef diseaseI (x):\n    if type(x) == list :\n        if len(x) > 0:\n            tmp = []\n            for i in x:\n                diseaseInfo =  i[\"diseaseId\"] + \" \" + i[\"diseaseName\"] + \"-\" + i[\"inheritanceMode\"].lower()\n                tmp.append(diseaseInfo)\n            return \";\".join(tmp)\n        else:\n            return np.nan\n    else:\n        if pd.isnull(x):\n            return np.nan\n\n\ngeneData[\"Diseases\"] = geneData[\"associatedDiseases\"].apply(lambda x:diseaseI(x))\n\ngeneData = geneData.sort_values([\"combinedScore\"],ascending=False)\n\ngeneData[\"exomiserRank\"] = range(1,len(geneData)+1)\ngeneData.drop(columns = [\"compatibleInheritanceModes\",\"associatedDiseases\"],inplace=True)\n##获取基因对应的位置信息\nvarPosi = pd.read_csv(fileTsv,sep=\"\\t\",usecols= [\"#CHROM\",\"POS\",\"REF\",\"ALT\",\"EXOMISER_GENE\"])\nvarPosi.rename(columns = {\"EXOMISER_GENE\":\"geneSymbol\"},inplace = True)\n\n\ndataMerge = pd.merge(varPosi,geneData,on = \"geneSymbol\",how=\"left\")\ndataMerge.to_csv(output,index=False,na_rep=\".\")",
                                "writable": false
                            }
                        ]
                    }
                ]
            },
            "label": "exomiser_res_get",
            "sbg:x": 1260.624755859375,
            "sbg:y": -146.04733276367188
        },
        {
            "id": "new_annovar_function_1",
            "in": [
                {
                    "id": "raw_vcf",
                    "source": "raw_vcf"
                },
                {
                    "id": "annovar_db",
                    "source": "annovar_db"
                },
                {
                    "id": "ref_version",
                    "source": "ref_version"
                },
                {
                    "id": "protocol",
                    "source": "protocol"
                },
                {
                    "id": "operation",
                    "source": "operation"
                },
                {
                    "id": "splicing_threshold",
                    "source": "splicing_threshold"
                },
                {
                    "id": "rm_tmp",
                    "default": true
                },
                {
                    "id": "output",
                    "source": "output"
                },
                {
                    "id": "other_info",
                    "default": true
                }
            ],
            "out": [
                {
                    "id": "output_vcf"
                },
                {
                    "id": "output_txt"
                },
                {
                    "id": "output_avinput"
                }
            ],
            "run": {
                "class": "CommandLineTool",
                "cwlVersion": "v1.0",
                "$namespaces": {
                    "sbg": "https://www.sevenbridges.com/"
                },
                "id": "new_annovar_function",
                "baseCommand": [
                    "table_annovar.pl"
                ],
                "inputs": [
                    {
                        "id": "raw_vcf",
                        "type": "File?",
                        "inputBinding": {
                            "position": 1
                        }
                    },
                    {
                        "id": "annovar_db",
                        "type": "Directory?",
                        "inputBinding": {
                            "position": 2
                        }
                    },
                    {
                        "id": "ref_version",
                        "type": "string?",
                        "inputBinding": {
                            "position": 3,
                            "prefix": "-buildver"
                        }
                    },
                    {
                        "default": "refGene,avsnp150,popfreq_all_20150413,gnomad211_exome,clinvar_exmpt,dbnsfp42a,rmsk,tfbsConsSites,intervar_20180118",
                        "id": "protocol",
                        "type": "string?",
                        "inputBinding": {
                            "position": 4,
                            "prefix": "-protocol"
                        }
                    },
                    {
                        "default": "g,f,f,f,f,f,r,r,f",
                        "id": "operation",
                        "type": "string?",
                        "inputBinding": {
                            "position": 5,
                            "prefix": "-operation"
                        }
                    },
                    {
                        "default": ".",
                        "id": "NA_string",
                        "type": "string?",
                        "inputBinding": {
                            "position": 6,
                            "prefix": "-nastring"
                        }
                    },
                    {
                        "id": "splicing_threshold",
                        "type": "int?",
                        "inputBinding": {
                            "position": 7,
                            "prefix": "-intronhgvs"
                        }
                    },
                    {
                        "default": true,
                        "id": "rm_tmp",
                        "type": "boolean?",
                        "inputBinding": {
                            "position": 8,
                            "prefix": "-remove"
                        }
                    },
                    {
                        "default": true,
                        "id": "confirm_vcfinput",
                        "type": "boolean?",
                        "inputBinding": {
                            "position": 9,
                            "prefix": "-vcfinput"
                        }
                    },
                    {
                        "id": "output",
                        "type": "string?",
                        "inputBinding": {
                            "position": 11,
                            "prefix": "-out"
                        }
                    },
                    {
                        "default": true,
                        "id": "other_info",
                        "type": "boolean?",
                        "inputBinding": {
                            "position": 10,
                            "prefix": "-otherinfo"
                        }
                    }
                ],
                "outputs": [
                    {
                        "id": "output_vcf",
                        "type": "File?",
                        "outputBinding": {
                            "glob": "$(inputs.output)*_multianno.vcf"
                        }
                    },
                    {
                        "id": "output_txt",
                        "type": "File?",
                        "outputBinding": {
                            "glob": "$(inputs.output)*_multianno.txt"
                        }
                    },
                    {
                        "id": "output_avinput",
                        "type": "File?",
                        "outputBinding": {
                            "glob": "$(inputs.output).avinput"
                        }
                    }
                ],
                "label": "New_annovar_function",
                "requirements": [
                    {
                        "class": "DockerRequirement",
                        "dockerPull": "harbor.bio-it.cn:5000/library/annovar:latest"
                    },
                    {
                        "class": "InlineJavascriptRequirement"
                    }
                ]
            },
            "label": "New_annovar_function",
            "sbg:x": 256.0781555175781,
            "sbg:y": 640.4940185546875
        },
        {
            "id": "bgzip",
            "in": [
                {
                    "id": "input",
                    "source": "new_annovar_function_1/output_vcf"
                }
            ],
            "out": [
                {
                    "id": "gz_vcf"
                }
            ],
            "run": {
                "class": "CommandLineTool",
                "cwlVersion": "v1.0",
                "$namespaces": {
                    "sbg": "https://www.sevenbridges.com/"
                },
                "id": "bgzip",
                "baseCommand": [
                    "bgzip"
                ],
                "inputs": [
                    {
                        "id": "input",
                        "type": "File?",
                        "inputBinding": {
                            "position": 0
                        }
                    }
                ],
                "outputs": [
                    {
                        "id": "gz_vcf",
                        "type": "File?",
                        "outputBinding": {
                            "glob": "*.vcf.gz"
                        }
                    }
                ],
                "label": "bgzip",
                "requirements": [
                    {
                        "class": "DockerRequirement",
                        "dockerPull": "harbor.bio-it.cn:5000/library/tabix:1.11--hdfd78af_0"
                    },
                    {
                        "class": "InitialWorkDirRequirement",
                        "listing": [
                            "$(inputs.input)"
                        ]
                    },
                    {
                        "class": "InlineJavascriptRequirement"
                    }
                ]
            },
            "label": "bgzip",
            "sbg:x": 629.2578735351562,
            "sbg:y": 301.76739501953125
        },
        {
            "id": "api_filter_annovar_res_r",
            "in": [
                {
                    "id": "sample_name",
                    "source": "output"
                },
                {
                    "id": "maf_cutoff",
                    "source": "maf_cutoff"
                },
                {
                    "id": "maf_database",
                    "source": [
                        "maf_database"
                    ]
                },
                {
                    "id": "region_filter_arg",
                    "source": [
                        "region_filter_arg"
                    ]
                },
                {
                    "id": "function_filter_arg",
                    "source": [
                        "function_filter_arg"
                    ]
                },
                {
                    "id": "annovar_res",
                    "source": "geneanno/output_1"
                }
            ],
            "out": [
                {
                    "id": "output"
                }
            ],
            "run": {
                "class": "CommandLineTool",
                "cwlVersion": "v1.0",
                "$namespaces": {
                    "sbg": "https://www.sevenbridges.com/"
                },
                "id": "api_filter_annovar_res_r",
                "baseCommand": [
                    "Rscript",
                    "Filter.R"
                ],
                "inputs": [
                    {
                        "id": "sample_name",
                        "type": "string?",
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--sample_name"
                        }
                    },
                    {
                        "id": "maf_cutoff",
                        "type": "float?",
                        "inputBinding": {
                            "position": 1,
                            "prefix": "--maf_cutoff"
                        }
                    },
                    {
                        "id": "maf_database",
                        "type": "string[]?",
                        "inputBinding": {
                            "position": 2,
                            "prefix": "--maf_database",
                            "itemSeparator": " "
                        }
                    },
                    {
                        "id": "region_filter_arg",
                        "type": "string[]?",
                        "inputBinding": {
                            "position": 3,
                            "prefix": "--region_filter",
                            "itemSeparator": " "
                        }
                    },
                    {
                        "id": "function_filter_arg",
                        "type": "string[]?",
                        "inputBinding": {
                            "position": 4,
                            "prefix": "--function_filter",
                            "itemSeparator": ","
                        }
                    },
                    {
                        "id": "annovar_res",
                        "type": "File?",
                        "inputBinding": {
                            "position": 0,
                            "prefix": "--annovar_dt"
                        }
                    }
                ],
                "outputs": [
                    {
                        "id": "output",
                        "type": "File?",
                        "outputBinding": {
                            "glob": "*_Final_variation_filterd.csv"
                        }
                    }
                ],
                "label": "api_filter_annovar_res.R",
                "requirements": [
                    {
                        "class": "DockerRequirement",
                        "dockerPull": "harbor.bio-it.cn:5000/library/variminer_r4.0:latest"
                    },
                    {
                        "class": "InitialWorkDirRequirement",
                        "listing": [
                            {
                                "entryname": "Filter.R",
                                "entry": "#For cwl\n# prepare env\nrepos='https://mirrors.ustc.edu.cn/CRAN/'\n\ninstall.packages('argparser',repos = repos)\noptions(scipen = 200)\nlibrary('readr')\nlibrary('stringr')\nlibrary('dplyr')\nlibrary('argparser')\n\n\n# loading arguments\nget_arg <-function(){\n  p <- arg_parser(\"Annovar Filter analysis\")\n  p <- add_argument(p,'--annovar_dt',help = 'Annovar annotated file',type = 'character')\n  p <- add_argument(p,'--sample_name',help = 'Sample name',type = 'character')\n  p <- add_argument(p,'--maf_cutoff',help = 'MAF cutoff',type = 'numeric' )\n  p <- add_argument(p,'--maf_database',help = 'filter database',type = 'character',default = '1000G_ALL 1000G_EAS ExAC_ALL ExAC_EAS ESP6500siv2_ALL ESP6500siv2_EA AF AF_eas')\n  p <- add_argument(p,'--region_filter',help = 'Variation region filter',type = 'character',default = 'intergenic intron intronic ncRNA_intronic ncRNA_exonic ncRNA_exonic;splicing ncRNA_splicing ncRNA_UTR5 UTR3 UTR5 upstream;downstream  upstream \n                 UTR3;UTR5 UTR5;UTR3 downstream')\n  p <- add_argument(p,'--function_filter',help = 'Variation function effect filter',type = 'character',default = 'synonymous SNV')\n  args <- parse_args(p)\n  return(args)\n  }\n\n\nargs <- get_arg()\n\n#arg <- commandArgs(TRUE)\n#sample_name <- arg[1]\n#maf_cutoff <- arg[2]\n#maf_database <- arg[3]\n#region_filter_arg <- arg[4]\n#function_filter_arg <- arg[5]\n#annovar_res <- arg[6]\n\n## processing split array\n#freqdb_input <- unlist(str_split(args$maf_database,' '))\n#region_input <- unlist(str_split(args$region_filter_arg,' '))\n#function_input <- unlist(str_split(function_filter_arg,' '))\nmaf_database <- unlist(str_split(args$maf_database, ' '))\nregion_filter <- unlist(str_split(args$region_filter,' '))\nfunction_filter <- unlist(str_split(args$function_filter,','))\nmaf_cutoff <- args$maf_cutoff\nsample_name <- args$sample_name\n##loading file \n\nprint(\"Loading file ......\")\nannoted_dt <- read_delim(args$annovar_dt,'\\t', escape_double = FALSE, trim_ws = TRUE)\n\nprint(\"exempting the annovar annotated result by clinvar\n      ......\")\n\nclinvar_exmpt_data <- annoted_dt[which(annoted_dt$CLIN_exmpt==\"True\"),]\nnon_exmpt_data <- annoted_dt[which(annoted_dt$CLIN_exmpt!=\"True\"),]\n\n\n# confirming the filter rule\nprint(\"Confirming the filter rule \n      ......\")\n\nfreq_donated <- c()\nregion_rule <- c()\nfunction_rule <- c()\n\nfreq_donated <-c(freq_donated,maf_database)\nregion_rule <- c(region_rule,region_filter)\nfunction_rule <- c(function_rule,function_filter)\n\n#max_freq <- apply(dt[,freq_donated],1,max,na.rm=F)\nprint('calculating the max_maf from select database\n      ......')\nclinvar_exmpt_data$max_maf <- apply(clinvar_exmpt_data[,freq_donated],1,max,na.rm=F)\nnon_exmpt_data$max_maf <- apply(non_exmpt_data[,freq_donated],1,max,na.rm=F)\n\n#trans the string type\nprint('split the num and NA allele freq of the file \n      ......')\nclinvar_exmpt_data_string <- clinvar_exmpt_data[which(clinvar_exmpt_data$max_maf == '.'),]\nclinvar_exmpt_data_num <- clinvar_exmpt_data[which(clinvar_exmpt_data$max_maf != '.'),]\nnon_exmpt_data_string <- non_exmpt_data[which(non_exmpt_data$max_maf == '.'),]\nnon_exmpt_data_num <- non_exmpt_data[which(non_exmpt_data$max_maf != '.'),]\n\n#change the  \"e\"  numeric\nclinvar_exmpt_data_num$max_maf <- as.numeric(clinvar_exmpt_data_num$max_maf)\nnon_exmpt_data_num$max_maf <- as.numeric(non_exmpt_data_num$max_maf)\nprint('preparation job all done \n      ......')\n# preparing to filter the file \nprint(\"start filtering ......\")\n\n# region filter\nprint('region .....')\nnon_exmpt_data_num_region_filterd <- filter(non_exmpt_data_num,!(Func.refGene %in% region_rule))\nnon_exmpt_data_string_region_filterd <- filter(non_exmpt_data_string,!(Func.refGene %in% region_rule))\n\n# function filter\nprint('function ......')\nnon_exmpt_data_num_function_filterd <- filter(non_exmpt_data_num_region_filterd,!(ExonicFunc.refGene %in% function_rule))\nnon_exmpt_data_string_function_filterd <- filter(non_exmpt_data_string_region_filterd,!(ExonicFunc.refGene %in% function_rule))\n\n# NAF filter\nprint('maf .......')\nnon_exmpt_data_num_maf_filterd <- non_exmpt_data_num_function_filterd[which(non_exmpt_data_num_function_filterd$max_maf <= maf_cutoff),]\n\n# Generate the final result \nfinal_res <- rbind(non_exmpt_data_num_maf_filterd,non_exmpt_data_string_function_filterd,clinvar_exmpt_data_num,clinvar_exmpt_data_string)\n\n\n# foramation  formation result \n#intervar result\nprint(\"Formation intervar result ......\")\n{final_res$PVS1 <- paste('PVS1: ',final_res$PVS1,sep = '')\n  final_res$PS1 <- paste('PS1: ',final_res$PS1,sep = '')\n  final_res$PS2 <- paste('PS2: ',final_res$PS2,sep = '')\n  final_res$PS3 <- paste('PS3: ',final_res$PS3,sep = '')\n  final_res$PS4 <- paste('PS4: ',final_res$PS4,sep = '')\n  final_res$PM1 <- paste('PM1: ',final_res$PM1,sep = '')\n  final_res$PM2 <- paste('PM2: ',final_res$PM2,sep = '')\n  final_res$PM3 <- paste('PM3: ',final_res$PM3,sep = '')\n  final_res$PM4 <- paste('PM4: ',final_res$PM4,sep = '')\n  final_res$PM5 <- paste('PM5: ',final_res$PM5,sep = '')\n  final_res$PM6 <- paste('PM6: ',final_res$PM6,sep = '')\n  final_res$PP1 <- paste('PP1: ',final_res$PP1,sep = '')\n  final_res$PP2 <- paste('PP2: ',final_res$PP2,sep = '')\n  final_res$PP3 <- paste('PP3: ',final_res$PP3,sep = '')\n  final_res$PP4 <- paste('PP4: ',final_res$PP4,sep = '')\n  final_res$PP5 <- paste('PP5: ',final_res$PP5,sep = '')\n  final_res$BA1 <- paste('BA1: ',final_res$BA1,sep = '')\n  final_res$BS1 <- paste('BS1: ',final_res$BS1,sep = '')\n  final_res$BS2 <- paste('BS2: ',final_res$BS2,sep = '')\n  final_res$BS3 <- paste('BS3: ',final_res$BS3,sep = '')\n  final_res$BS4 <- paste('BS4: ',final_res$BS4,sep = '')\n  final_res$BP1 <- paste('BP1: ',final_res$BP1,sep = '')\n  final_res$BP2 <- paste('BP2: ',final_res$BP2,sep = '')\n  final_res$BP3 <- paste('BP3: ',final_res$BP3,sep = '')\n  final_res$BP4 <- paste('BP4: ',final_res$BP4,sep = '')\n  final_res$BP5 <- paste('BP5: ',final_res$BP5,sep = '')\n  final_res$BP6 <- paste('BP6: ',final_res$BP6,sep = '')\n  final_res$BP7 <- paste('BP7: ',final_res$BP7,sep = '')\n}\n{final_res$InterVar_detail <- paste(final_res$PVS1,';',final_res$PS1,';',final_res$PS2,';',final_res$PS3,';'\n                                    ,final_res$PS4,';',final_res$PM1,';',final_res$PM2,';',final_res$PM3,';'\n                                    ,final_res$PM4,\n                                    ';',final_res$PM5,';',final_res$PM6,';',final_res$PP1,';',final_res$PP2,';'\n                                    ,final_res$PP3,\n                                    ';',final_res$PP4,';',final_res$PP5,';',final_res$BA1,';',final_res$BS1,';',\n                                    final_res$BS2,';',final_res$BS3,';',final_res$BS4,';',final_res$BP1,';',\n                                    final_res$BP2,';',final_res$BP3,';',final_res$BP4,';',final_res$BP5,';',\n                                    final_res$BP6,';',final_res$BP7,sep = ' ')\n}\n#Sequencing quality\nprint(\"Formation sequencing quality ......\")\n{Depth <- as.data.frame(str_split(final_res$Otherinfo13,\":\",n=5,simplify = T))\n  colnames(Depth) <- c('Genotype','Allele_Depth','Depth','Genotype_Quality','provieds_the_likelihoods_of_the_given_genotypes')\n  allele_depth <- as.data.frame(str_split(Depth$Allele_Depth,',',n=2,simplify = T))\n  Depth <- cbind(Depth,allele_depth)\n  Depth$Depth <- as.integer(Depth$Depth)\n  Depth$V1 <- as.integer(Depth$V1)\n  Depth$WT_ratio <- Depth$V1/Depth$Depth\n  Depth$Hom_Het<- 'Hom'\n  Depth$Hom_Het[which(Depth$Genotype == '0/1')] = 'Het'\n  Depth$Hom_Het[which(Depth$Genotype == '1/2')] = 'Het'\n  table(Depth$Hom_Het)\n  final_res <- cbind(final_res,Depth)}\n# Variation detail \nprint('Formation Variation detail ......')\nfinal_res$Variation_detail <- paste(final_res$Ref,'>',final_res$Alt,sep = '')\n#Generating\nprint(\"Generating .......\")\n{select_col <- c(\"Chr\",\"Start\",\"End\",\"Variation_detail\",\"Gene.refGene\",\"Func.refGene\",\"ExonicFunc.refGene\",\"GeneDetail.refGene\",\n                \"AAChange.refGene\",\"Gene.ensGene\",\"Func.ensGene\",\"ExonicFunc.ensGene\",\"GeneDetail.ensGene\",\"AAChange.ensGene\",\n                \"Genotype\",\"Hom_Het\",\"Depth\",\"Allele_Depth\",\"WT_ratio\",\"CLNSIG\",\"CLIN_exmpt\",\"CLNDN\",\"CLNDISDB\",\"CLNHGVS\",\"CLNREVSTAT\",\"InterVar_automated\",\"InterVar_detail\",\n                \"OMIM_Phenotype\",\"HPO_phenotype\",\n                \"annotation_summary\",\"annotation_description\",\n                \"GO_BP\",\"GO_CC\",\"GO_MF\",\"DO_disease\",\"KEGG_pathway\",\"WIKI_pathway\",\"REACTOME_pathway\",\"BIOCARTA_pathway\",\"HALLMARK_pathway\",\n                \"SpliceAI\",\"Interpro_domain\",\"rmsk\",\"tfbsConsSites\",\n                \"max_maf\",freq_donated,\n                \"SIFT_pred\",\"SIFT_score\",\"SIFT4G_pred\",\"SIFT4G_score\",\n                \"Polyphen2_HDIV_pred\",\"Polyphen2_HDIV_score\",\"Polyphen2_HVAR_pred\",\"Polyphen2_HVAR_score\",\n                \"LRT_pred\",\"LRT_score\",\"MutationTaster_pred\",\"MutationTaster_score\",\"MutationAssessor_pred\",\"MutationAssessor_score\",\n                \"FATHMM_pred\",\"FATHMM_score\",\"PROVEAN_pred\",\"PROVEAN_score\",\n                \"VEST4_score\",\"MetaSVM_pred\",\"MetaSVM_score\",\"MetaLR_pred\",\"MetaLR_score\",\n                \"M-CAP_pred\",\"M-CAP_score\",\"REVEL_score\",\"ClinPred_pred\",\"ClinPred_score\",\n                \"CADD_phred\",\"CADD_raw\",\"GERP++_NR\",\"phyloP100way_vertebrate\",\"SiPhy_29way_logOdds\",\n                \"Otherinfo1\",\"Otherinfo2\",\"Otherinfo3\",\"Otherinfo4\",\"Otherinfo5\",\n                \"Otherinfo6\",\"Otherinfo7\",\"Otherinfo8\")}\nwriteable_res <- final_res %>% select(select_col)\ncol_nm <- colnames(writeable_res)\nfor (i in col_nm){\n  writeable_res[[i]][which(writeable_res[[i]]=='.')] = ''\n  writeable_res[[i]] <- as.character(writeable_res[[i]])\n}\nprint('all done, save the final data......')\nwrite.csv(writeable_res,paste(sample_name,'_Final_variation_filterd.csv',sep = ''),row.names = F)\n\n",
                                "writable": false
                            }
                        ]
                    }
                ]
            },
            "label": "api_filter_annovar_res.R",
            "sbg:x": 1260.368408203125,
            "sbg:y": 1007.0263061523438
        }
    ],
    "requirements": [
        {
            "class": "SubworkflowFeatureRequirement"
        }
    ]
}