{
    "class": "CommandLineTool",
    "cwlVersion": "v1.0",
    "$namespaces": {
        "sbg": "https://www.sevenbridges.com/"
    },
    "id": "api_filter_annovar_res_r",
    "baseCommand": [
        "Rscript",
        "Filter.R"
    ],
    "inputs": [
        {
            "id": "sample_name",
            "type": "string?",
            "inputBinding": {
                "position": 0,
                "prefix": "--sample_name"
            }
        },
        {
            "id": "maf_cutoff",
            "type": "float?",
            "inputBinding": {
                "position": 1,
                "prefix": "--maf_cutoff"
            }
        },
        {
            "id": "maf_database",
            "type": "string[]?",
            "inputBinding": {
                "position": 2,
                "prefix": "--maf_database",
                "itemSeparator": " "
            }
        },
        {
            "id": "region_filter_arg",
            "type": "string[]?",
            "inputBinding": {
                "position": 3,
                "prefix": "--region_filter",
                "itemSeparator": " "
            }
        },
        {
            "id": "function_filter_arg",
            "type": "string[]?",
            "inputBinding": {
                "position": 4,
                "prefix": "--function_filter",
                "itemSeparator": ","
            }
        },
        {
            "id": "annovar_res",
            "type": "File?",
            "inputBinding": {
                "position": 0,
                "prefix": "--annovar_dt"
            }
        },
        {
            "id": "exomiser_res",
            "type": "File?",
            "inputBinding": {
                "position": 0,
                "prefix": "--exomiser_dt"
            }
        }
    ],
    "outputs": [
        {
            "id": "filter_res",
            "type": "File?",
            "outputBinding": {
                "glob": "*_Final_variation_filterd.csv"
            }
        },
        {
            "id": "unfilter_res",
            "type": "File?",
            "outputBinding": {
                "glob": "*_Variation_unfilterd.csv"
            }
        }
    ],
    "label": "api_filter_annovar_res.R",
    "requirements": [
        {
            "class": "DockerRequirement",
            "dockerPull": "harbor.bio-it.cn:5000/library/variminer_r4.0:latest"
        },
        {
            "class": "InitialWorkDirRequirement",
            "listing": [
                {
                    "entryname": "Filter.R",
                    "entry": "#For cwl\n# prepare env\nrepos='https://mirrors.ustc.edu.cn/CRAN/'\n\ninstall.packages('argparser',repos = repos)\noptions(scipen = 200)\nlibrary('readr')\nlibrary('stringr')\nlibrary('dplyr')\nlibrary('argparser')\n\n\n# loading arguments\nget_arg <-function(){\n  p <- arg_parser(\"Annovar Filter analysis\")\n  p <- add_argument(p,'--annovar_dt',help = 'Annovar annotated file',type = 'character')\n  p <- add_argument(p,'--sample_name',help = 'Sample name',type = 'character')\n  p <- add_argument(p,'--maf_cutoff',help = 'MAF cutoff',type = 'numeric' )\n  p <- add_argument(p,'--maf_database',help = 'filter database',type = 'character',default = '1000G_ALL 1000G_EAS ExAC_ALL ExAC_EAS ESP6500siv2_ALL ESP6500siv2_EA AF AF_eas')\n  p <- add_argument(p,'--region_filter',help = 'Variation region filter',type = 'character',default = 'intergenic intron intronic ncRNA_intronic ncRNA_exonic ncRNA_exonic;splicing ncRNA_splicing ncRNA_UTR5 UTR3 UTR5 upstream;downstream  upstream \n                 UTR3;UTR5 UTR5;UTR3 downstream')\n  p <- add_argument(p,'--function_filter',help = 'Variation function effect filter',type = 'character',default = 'synonymous SNV')\n  p <- add_argument(p,'--exomiser_dt',help = \"exomiser filter data\", type = 'character')\n  args <- parse_args(p)\n  return(args)\n}\n\n\nargs <- get_arg()\n\n#arg <- commandArgs(TRUE)\n#sample_name <- arg[1]\n#maf_cutoff <- arg[2]\n#maf_database <- arg[3]\n#region_filter_arg <- arg[4]\n#function_filter_arg <- arg[5]\n#annovar_res <- arg[6]\n\n## processing split array\n#freqdb_input <- unlist(str_split(args$maf_database,' '))\n#region_input <- unlist(str_split(args$region_filter_arg,' '))\n#function_input <- unlist(str_split(function_filter_arg,' '))\nmaf_database <- unlist(str_split(args$maf_database, ' '))\nregion_filter <- unlist(str_split(args$region_filter,' '))\nfunction_filter <- unlist(str_split(args$function_filter,','))\nmaf_cutoff <- args$maf_cutoff\nsample_name <- args$sample_name\nexomiser_dt <- args$exomiser_dt\n##loading file \n\nprint(\"Loading file ......\")\nannoted_dt <- read_delim(args$annovar_dt,'\\t', escape_double = FALSE, trim_ws = TRUE)\nexomiser_dt <- read_delim(exomiser_dt,',', escape_double = FALSE, trim_ws = TRUE)\nannoted_dt <- merge(exomiser_dt,annoted_dt,by.x = c('POS','REF','ALT'),by.y = c('Otherinfo5','Otherinfo7','Otherinfo8'),all.x = TRUE)\n# foramation  formation result \n# intervar result\nprint(\"Formation intervar result ......\")\n{annoted_dt$PVS1 <- paste('PVS1: ',annoted_dt$PVS1,sep = '')\nannoted_dt$PS1 <- paste('PS1: ',annoted_dt$PS1,sep = '')\nannoted_dt$PS2 <- paste('PS2: ',annoted_dt$PS2,sep = '')\nannoted_dt$PS3 <- paste('PS3: ',annoted_dt$PS3,sep = '')\nannoted_dt$PS4 <- paste('PS4: ',annoted_dt$PS4,sep = '')\nannoted_dt$PM1 <- paste('PM1: ',annoted_dt$PM1,sep = '')\nannoted_dt$PM2 <- paste('PM2: ',annoted_dt$PM2,sep = '')\nannoted_dt$PM3 <- paste('PM3: ',annoted_dt$PM3,sep = '')\nannoted_dt$PM4 <- paste('PM4: ',annoted_dt$PM4,sep = '')\nannoted_dt$PM5 <- paste('PM5: ',annoted_dt$PM5,sep = '')\nannoted_dt$PM6 <- paste('PM6: ',annoted_dt$PM6,sep = '')\nannoted_dt$PP1 <- paste('PP1: ',annoted_dt$PP1,sep = '')\nannoted_dt$PP2 <- paste('PP2: ',annoted_dt$PP2,sep = '')\nannoted_dt$PP3 <- paste('PP3: ',annoted_dt$PP3,sep = '')\nannoted_dt$PP4 <- paste('PP4: ',annoted_dt$PP4,sep = '')\nannoted_dt$PP5 <- paste('PP5: ',annoted_dt$PP5,sep = '')\nannoted_dt$BA1 <- paste('BA1: ',annoted_dt$BA1,sep = '')\nannoted_dt$BS1 <- paste('BS1: ',annoted_dt$BS1,sep = '')\nannoted_dt$BS2 <- paste('BS2: ',annoted_dt$BS2,sep = '')\nannoted_dt$BS3 <- paste('BS3: ',annoted_dt$BS3,sep = '')\nannoted_dt$BS4 <- paste('BS4: ',annoted_dt$BS4,sep = '')\nannoted_dt$BP1 <- paste('BP1: ',annoted_dt$BP1,sep = '')\nannoted_dt$BP2 <- paste('BP2: ',annoted_dt$BP2,sep = '')\nannoted_dt$BP3 <- paste('BP3: ',annoted_dt$BP3,sep = '')\nannoted_dt$BP4 <- paste('BP4: ',annoted_dt$BP4,sep = '')\nannoted_dt$BP5 <- paste('BP5: ',annoted_dt$BP5,sep = '')\nannoted_dt$BP6 <- paste('BP6: ',annoted_dt$BP6,sep = '')\nannoted_dt$BP7 <- paste('BP7: ',annoted_dt$BP7,sep = '')\n\nannoted_dt$InterVar_detail <- paste(annoted_dt$PVS1,';',annoted_dt$PS1,';',annoted_dt$PS2,';',annoted_dt$PS3,';'\n                ,annoted_dt$PS4,';',annoted_dt$PM1,';',annoted_dt$PM2,';',annoted_dt$PM3,';'\n                ,annoted_dt$PM4,\n                ';',annoted_dt$PM5,';',annoted_dt$PM6,';',annoted_dt$PP1,';',annoted_dt$PP2,';'\n                ,annoted_dt$PP3,\n                ';',annoted_dt$PP4,';',annoted_dt$PP5,';',annoted_dt$BA1,';',annoted_dt$BS1,';',\n                annoted_dt$BS2,';',annoted_dt$BS3,';',annoted_dt$BS4,';',annoted_dt$BP1,';',\n                annoted_dt$BP2,';',annoted_dt$BP3,';',annoted_dt$BP4,';',annoted_dt$BP5,';',\n                annoted_dt$BP6,';',annoted_dt$BP7,sep = ' ')\n}\n#Sequencing quality\nprint(\"Formation sequencing quality ......\")\n{Depth <- as.data.frame(str_split(annoted_dt$Otherinfo13,\":\",n=5,simplify = T))\ncolnames(Depth) <- c('Genotype','Allele_Depth','Depth','Genotype_Quality','provieds_the_likelihoods_of_the_given_genotypes')\nallele_depth <- as.data.frame(str_split(Depth$Allele_Depth,',',n=2,simplify = T))\nDepth <- cbind(Depth,allele_depth)\nDepth$Depth <- as.integer(Depth$Depth)\nDepth$V1 <- as.integer(Depth$V1)\nDepth$WT_ratio <- Depth$V1/Depth$Depth\nDepth$Hom_Het<- 'Hom'\nDepth$Hom_Het[which(Depth$Genotype == '0/1')] = 'Het'\nDepth$Hom_Het[which(Depth$Genotype == '1/2')] = 'Het'\ntable(Depth$Hom_Het)\nannoted_dt <- cbind(annoted_dt,Depth)\n}\n# Variation detail \nprint('Formation Variation detail ......')\nannoted_dt$Variation_detail <- paste(annoted_dt$Ref,'>',annoted_dt$Alt,sep = '')\n\nprint(\"exempting the annovar annotated result by clinvar\n      ......\")\nclinvar_exmpt_data <- annoted_dt[which(annoted_dt$CLIN_exmpt==\"True\"),]\nnon_exmpt_data <- annoted_dt[which(annoted_dt$CLIN_exmpt!=\"True\"),]\n# confirming the filter rule\nprint(\"Confirming the filter rule \n      ......\")\nfreq_donated <- c()\nregion_rule <- c()\nfunction_rule <- c()\n\nfreq_donated <-c(freq_donated,maf_database)\nregion_rule <- c(region_rule,region_filter)\nfunction_rule <- c(function_rule,function_filter)\n\n#max_freq <- apply(dt[,freq_donated],1,max,na.rm=F)\nprint('calculating the max_maf from select database\n      ......')\nclinvar_exmpt_data$max_maf <- apply(clinvar_exmpt_data[,freq_donated],1,max,na.rm=F)\nnon_exmpt_data$max_maf <- apply(non_exmpt_data[,freq_donated],1,max,na.rm=F)\nannoted_dt <- rbind(clinvar_exmpt_data,non_exmpt_data)\n#trans the string type\nprint('split the num and NA allele freq of the file \n      ......')\nclinvar_exmpt_data_string <- clinvar_exmpt_data[which(clinvar_exmpt_data$max_maf == '.'),]\nclinvar_exmpt_data_num <- clinvar_exmpt_data[which(clinvar_exmpt_data$max_maf != '.'),]\nnon_exmpt_data_string <- non_exmpt_data[which(non_exmpt_data$max_maf == '.'),]\nnon_exmpt_data_num <- non_exmpt_data[which(non_exmpt_data$max_maf != '.'),]\n\n#change the  \"e\"  numeric\nclinvar_exmpt_data_num$max_maf <- as.numeric(clinvar_exmpt_data_num$max_maf)\nnon_exmpt_data_num$max_maf <- as.numeric(non_exmpt_data_num$max_maf)\nprint('preparation job all done \n      ......')\n# preparing to filter the file \nprint(\"start filtering ......\")\n\n# region filter\nprint('region .....')\nnon_exmpt_data_num_region_filterd <- filter(non_exmpt_data_num,!(Func.refGene %in% region_rule))\nnon_exmpt_data_string_region_filterd <- filter(non_exmpt_data_string,!(Func.refGene %in% region_rule))\n\n# function filter\nprint('function ......')\nnon_exmpt_data_num_function_filterd <- filter(non_exmpt_data_num_region_filterd,!(ExonicFunc.refGene %in% function_rule))\nnon_exmpt_data_string_function_filterd <- filter(non_exmpt_data_string_region_filterd,!(ExonicFunc.refGene %in% function_rule))\n\n# NAF filter\nprint('maf .......')\nnon_exmpt_data_num_maf_filterd <- non_exmpt_data_num_function_filterd[which(non_exmpt_data_num_function_filterd$max_maf <= maf_cutoff),]\n\n# Generate the final result \nfinal_res <- rbind(non_exmpt_data_num_maf_filterd,non_exmpt_data_string_function_filterd,clinvar_exmpt_data_num,clinvar_exmpt_data_string)\n\n\n\n#Generating\nprint(\"Generating .......\")\nselect_col <- c(\"Chr\",\"Start\",\"End\",\"Variation_detail\",\"Gene.refGene\",\"Func.refGene\",\"ExonicFunc.refGene\",\"GeneDetail.refGene\",\n                \"AAChange.refGene\",\"Gene.ensGene\",\"Func.ensGene\",\"ExonicFunc.ensGene\",\"GeneDetail.ensGene\",\"AAChange.ensGene\",\n                \"InheritanceModes\",\"exomiserRank\",\"combinedScore\",\"Diseases\",\n                \"Genotype\",\"Hom_Het\",\"Depth\",\"Allele_Depth\",\"WT_ratio\",\"CLNSIG\",\"CLIN_exmpt\",\"CLNDN\",\"CLNDISDB\",\"CLNHGVS\",\"CLNREVSTAT\",\"InterVar_automated\",\"InterVar_detail\",\n                \"OMIM_Phenotype\",\"HPO_phenotype\",\n                \"annotation_summary\",\"annotation_description\",\n                \"GO_BP\",\"GO_CC\",\"GO_MF\",\"DO_disease\",\"KEGG_pathway\",\"WIKI_pathway\",\"REACTOME_pathway\",\"BIOCARTA_pathway\",\"HALLMARK_pathway\",\n                \"SpliceAI\",\"Interpro_domain\",\"rmsk\",\"tfbsConsSites\",\n                \"max_maf\",freq_donated,\n                \"SIFT_pred\",\"SIFT_score\",\"SIFT4G_pred\",\"SIFT4G_score\",\n                \"Polyphen2_HDIV_pred\",\"Polyphen2_HDIV_score\",\"Polyphen2_HVAR_pred\",\"Polyphen2_HVAR_score\",\n                \"LRT_pred\",\"LRT_score\",\"MutationTaster_pred\",\"MutationTaster_score\",\"MutationAssessor_pred\",\"MutationAssessor_score\",\n                \"FATHMM_pred\",\"FATHMM_score\",\"PROVEAN_pred\",\"PROVEAN_score\",\n                \"VEST4_score\",\"MetaSVM_pred\",\"MetaSVM_score\",\"MetaLR_pred\",\"MetaLR_score\",\n                \"M-CAP_pred\",\"M-CAP_score\",\"REVEL_score\",\"ClinPred_pred\",\"ClinPred_score\",\n                \"CADD_phred\",\"CADD_raw\",\"GERP++_NR\",\"phyloP100way_vertebrate\",\"SiPhy_29way_logOdds\")\nprint('0')\nwriteable_res <- final_res %>% select(select_col) %>% arrange(exomiserRank)\nprint('1')\nunfilter_res <- annoted_dt %>% select(select_col)\ncol_nm <- colnames(writeable_res)\nfor (i in col_nm){\n  writeable_res[[i]][which(writeable_res[[i]]=='.')] = ''\n  writeable_res[[i]] <- as.character(writeable_res[[i]])\n}\ncol_name <- colnames(unfilter_res)\nfor (i in col_name){\n  unfilter_res[[i]][which(unfilter_res[[i]]==\".\")] = ''\n  unfilter_res[[i]] <- as.character(unfilter_res[[i]])\n}\n\nprint('all done, save the final data......')\nwrite.csv(unfilter_res,paste(sample_name,'_Variation_unfilterd.csv',sep=''),row.names=F)\nwrite.csv(writeable_res,paste(sample_name,'_Final_variation_filterd.csv',sep = ''),row.names = F)",
                    "writable": false
                }
            ]
        }
    ]
}